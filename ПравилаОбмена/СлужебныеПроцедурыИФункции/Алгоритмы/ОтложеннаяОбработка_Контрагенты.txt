Процедура ОтложеннаяОбработка_Контрагенты(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.СтранаРегистрации) ИЛИ Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент) Тогда
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;	
	 
	Если ЗначениеЗаполнено(Объект.СтранаРегистрации) И НЕ Объект.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ЮрФизЛицо) И ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда
		Объект.ЮрФизЛицо = ?(Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			Перечисления.ЮрФизЛицо.ФизЛицо,
			Перечисления.ЮрФизЛицо.ЮрЛицо);
	КонецЕсли;	  
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	ПартнерОбъект = ?(ЗначениеЗаполнено(Объект.Партнер),
		Объект.Партнер.ПолучитьОбъект(),
		Справочники.Партнеры.СоздатьЭлемент());
		
	Если ПартнерОбъект.ЭтоНовый() Тогда
		ПартнерОбъект.ДатаРегистрации = Дата('19800101');
		ПартнерОбъект.Клиент          = Истина;
		ПартнерОбъект.Поставщик       = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.УстановитьНовыйКод(ОбменДаннымиСервер.ПрефиксИнформационнойБазы());
		
		ПартнерОбъект.ГруппаДоступа   = ЭлементПоУмолчанию(КомпонентыОбмена, "ГруппаДоступаПартнера");
	КонецЕсли;
	
	// Синхронизация свойств контрагента и партнера.
	Если ПартнерОбъект <> Справочники.Партнеры.НеизвестныйПартнер
		И (ПартнерОбъект.ЭтоНовый() Или ИспользоватьПартнеровКакКонтрагентов) Тогда
		ПартнерОбъект.Наименование       = Объект.Наименование;
		ПартнерОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
		
		ПартнерОбъект.ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо,
			Перечисления.КомпанияЧастноеЛицо.Компания);
		
		Для Каждого СтрокаКИКонтрагента Из Объект.КонтактнаяИнформация Цикл
			ВидКИПартнера = ВидКИПартнераПоВидуКИКонтрагента(СтрокаКИКонтрагента.Вид, ИспользоватьПартнеровКакКонтрагентов);
			Если ВидКИПартнера = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиКИПартнера = ПартнерОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидКИПартнера));
			Для Каждого СтрокаКИПартнера Из СтрокиКИПартнера Цикл
				ПартнерОбъект.КонтактнаяИнформация.Удалить(СтрокаКИПартнера);
			КонецЦикла;
			
			СтрокаКИПартнера = ПартнерОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКИПартнера, СтрокаКИКонтрагента);
			СтрокаКИПартнера.Вид = ВидКИПартнера;
		КонецЦикла;
		
		БылаПометкаУдаления = ПартнерОбъект.ПометкаУдаления;
		ПартнерОбъект.ПометкаУдаления = Ложь;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерОбъект.Ссылка);
		Если Объект.Партнер <> ПартнерОбъект.Ссылка Тогда
			Объект.Партнер = ПартнерОбъект.Ссылка;
		Иначе
			ОбъектМодифицирован = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

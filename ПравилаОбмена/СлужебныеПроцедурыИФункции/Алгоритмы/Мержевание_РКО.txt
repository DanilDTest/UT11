Процедура Мержевание_РКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ_КонтрагентДоИзменения = ДанныеИБ.Контрагент;
	
	#Область Шапка
	
	// При операциях "интеркампани", некоторые реквизиты объекта ИБ имеют больший приоритет.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеИБ,
			"Контрагент,ХозяйственнаяОперация");
	КонецЕсли;
	
	// Заполнение контрагента в особых случаях, когда для него нет ПКС.
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ДанныеИБ.Контрагент = ПолученныеДанные.Контрагент;
	КонецЕсли;
	
	ДанныеИБ.НеКонтролироватьЗаполнениеЗаявки = Ложь;
	
	
	// Заполнение банковского счета по операциям Инкассации и Взноса наличных.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.БанковскийСчет) Тогда
			ПолученныеДанные.БанковскийСчет = ДанныеИБ.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Заполнение кассы-получателя.
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КассаПолучатель, "ВалютаДенежныхСредств, Владелец");
		Если РеквизитыКассы.ВалютаДенежныхСредств <> ПолученныеДанные.ВалютаКонвертации 
			Или РеквизитыКассы.Владелец <> ПолученныеДанные.Организация Тогда
			ДанныеИБ.КассаПолучатель = ПолученныеДанные.КассаПолучатель;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	// Мержевание расшифровки платежа.
	РасшифровкаПлатежаИсточник = ПолученныеДанные.РасшифровкаПлатежа;
	РасшифровкаПлатежаПриемник = ДанныеИБ.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежаИсточник.Количество() = РасшифровкаПлатежаПриемник.Количество() Тогда
		
		Для ИндексСтроки = 0 По РасшифровкаПлатежаИсточник.Количество() - 1 Цикл
			
			СтрокаИсточник = РасшифровкаПлатежаИсточник[ИндексСтроки];
			СтрокаПриемник = РасшифровкаПлатежаПриемник[ИндексСтроки];
			
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,
				"Сумма,
				|СуммаВзаиморасчетов,
				|ВалютаВзаиморасчетов");
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Заказ) Тогда
				СтрокаПриемник.Заказ = СтрокаИсточник.Заказ;
			КонецЕсли;	
					
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяРасходов) Тогда
				СтрокаПриемник.СтатьяРасходов = СтрокаИсточник.СтатьяРасходов;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаПриемник.СтатьяДвиженияДенежныхСредств = СтрокаИсточник.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточник.Подразделение) Тогда
				СтрокаПриемник.Подразделение = СтрокаИсточник.Подразделение;
			КонецЕсли;
			
			// Изменение контрагента обновляет зависимую от него аналитику.
			Если ДанныеИБ.Контрагент <> ДанныеИБ_КонтрагентДоИзменения Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, "Партнер, Заказ");
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПередКонвертациейУТКАУП(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	КомпонентыОбмена.ПараметрыКонвертации.ПриСинхронизацииЗарегистрированоПредупреждение = Ложь;	
	КомпонентыОбмена.Вставить("УдалятьСозданныеПоКлючевымСвойствам", Истина); 
	
	ПараметрыКонвертации.Вставить("КодУзлаWMSСкладыРоссия", "WMSW");
	ПараметрыКонвертации.Вставить("КодУзлаОтправителя", ""); 
	ПараметрыКонвертации.Вставить("ВыгруженныеОрганизации", Новый Массив); 
	
	ВидыЦенНоменклатуры = Новый СписокЗначений;
			
	ВидыЦенНоменклатуры.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор", "07ВнуковоАутлет")); // 07 Внуково Аутлет
	ВидыЦенНоменклатуры.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор", "02РозничнаяМагазинная")); // 02 Розничная магазинная
	ВидыЦенНоменклатуры.Добавить(Справочники.ВидыЦен.НайтиПоРеквизиту("Идентификатор", "08Якутск")); // 08 Якутск 
	
		
	ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры", ВидыЦенНоменклатуры);
	
	ПараметрыКонвертации.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	   
	  
	ЭтоОбменБП = Ложь; 
	УзелОтправителя = Неопределено;
	Если КомпонентыОбмена.Свойство("УзелОтправителя", УзелОтправителя) 
		И НЕ УзелОтправителя = Неопределено Тогда
			КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОтправителя, "Код");
			ЭтоОбменБП = СтрНайти(ВРЕГ(КодУзла), "BP");
	КонецЕсли;  
	
	ТекущийУзелЕСБ = RM_ОбменДаннымиПовтИсп.ДанныеТекущегоУзлаESB().ТекущийУзел; 
	ПараметрыКонвертации.Вставить("ТекущийУзелESB", ТекущийУзелЕСБ);  
	ПараметрыКонвертации.Вставить("УзелОтправительESB", УзелОтправителя);  
	     
	
	Если ЭтоОбменБП Тогда
		КомпонентыОбмена.Вставить("УзелКорреспондента", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел());   
	КонецЕсли;
	
	ПараметрыКонвертации.Вставить("ЭтоОбменБП", ЭтоОбменБП);
	
	
		
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Или КомпонентыОбмена.Свойство("ЭтоОбменEDI") Тогда
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
			
			Данные = ПолучитьОбщийМакет("КодВидаНоменклатурнойКлассификации").ПолучитьТекст() ;
	
			НоменклатурнаяКлассификация = Неопределено;
			ТЗКодов = Новый ТаблицаЗначений();
			ТЗКодов.Колонки.Добавить("Код");
			ТЗКодов.Колонки.Добавить("Наименование");
			ТЗКодов.Индексы.Добавить("Код");
	
			Если Не ПустаяСтрока(Данные) Тогда
	
				ЧтениеXML = Новый ЧтениеXML; 
				ЧтениеXML.УстановитьСтроку(Данные);
				ЧтениеXML.ПерейтиКСодержимому();
				
				Если ЧтениеXML.Имя = "КодВидаНоменклатурнойКлассификации" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Пока ЧтениеXML.Прочитать() Цикл  
						Если ЧтениеXML.Имя = "НоменклатурнаяКлассификация" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							Продолжить;
						ИначеЕсли ЧтениеXML.Имя = "ВидНоменклатурнойКлассификации" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
							НоваяСтрока = ТЗКодов.Добавить();
							НоваяСтрока.Наименование = ЧтениеXML.ЗначениеАтрибута("Имя");
							НоваяСтрока.Код          = ЧтениеXML.ЗначениеАтрибута("КодВида");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
	
			ПараметрыКонвертации.Вставить("КодыВидовНоменклатурнойКлассификации", ТЗКодов);
			
			ПараметрыКонвертации.Вставить("ИспользоватьСоглашенияСПоставщиками", Истина);
			
			// Виды  номенклатуры по умолчанию.
			ВидыНоменклатурыПоУмолчанию = Новый ТаблицаЗначений;
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ТипНоменклатуры");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("АлкогольнаяПродукция");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ВидНоменклатуры");
			ПараметрыКонвертации.Вставить("ВидыНоменклатурыПоУмолчанию", ВидыНоменклатурыПоУмолчанию);
	
			// Установка признака применения ставок НДС 4% и 2%.
			ПараметрыКонвертации.Вставить("ПоставщикиЛьготнаяСтавкаНДС", Новый Массив);
			
			// Установка признаков использования договоров контрагентов.
			ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСПоставщиками", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"));
			ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСКлиентами",    ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"));
			
			// Установка признаков использования заявок на расход ДС.
			ПараметрыКонвертации.Вставить("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств", 
				ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств"));
			
			// Соответствие для кэширования значений ФО.
			ЗначенияФО = Новый Соответствие;
			КомпонентыОбмена.ПараметрыКонвертации.ЗначенияФО = ЗначенияФО;
			
			// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
			ДопРеквизитыИСведения = Новый ТаблицаЗначений;
			ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
			ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
			
			// Инициализация таблицы для заполнения хоз.операций в загруженных статьях ДДС.
			СтатьиДДСИХозОперации = Новый ТаблицаЗначений;
			СтатьиДДСИХозОперации.Колонки.Добавить("СтатьяДДС");
			СтатьиДДСИХозОперации.Колонки.Добавить("ХозОперация");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации = СтатьиДДСИХозОперации;
	
			// Инициализация таблицы для формирования счетов-фактур полученных, по загруженным авансовым отчетам. 
			СФПолученные = Новый ТаблицаЗначений;
			СФПолученные.Колонки.Добавить("ДокументОснование");
			СФПолученные.Колонки.Добавить("ДатаСФ");
			СФПолученные.Колонки.Добавить("НомерСФ");
			СФПолученные.Колонки.Добавить("Контрагент");
			СФПолученные.Колонки.Добавить("Организация");
			СФПолученные.Колонки.Добавить("Валюта");
			КомпонентыОбмена.ПараметрыКонвертации.СФПолученныеПоЗагруженнымАвансовымОтчетам = СФПолученные;
			
			ДокументыСПС = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
			МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратПодарочныхСертификатов"));
			МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияПодарочныхСертификатов"));
			ДокументыСПС.Колонки.Добавить("ДокументСсылка", Новый ОписаниеТипов(МассивТипов));
			ДокументыСПС.Колонки.Добавить("ДатаДокумента");
			// 1 - ОтчетОРозничныхПродажах, 2 - РеализацияПС, ВозвратПС.
			// 3 - ВозвратыПС, для которых явно указан ОРП
			ДокументыСПС.Колонки.Добавить("ОчередьДокумента");
			ДокументыСПС.Колонки.Добавить("КассаККМ");
			ДокументыСПС.Колонки.Добавить("Организация");
			ДокументыСПС.Колонки.Добавить("Валюта");
			ДокументыСПС.Колонки.Добавить("ОРП", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
			КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами = ДокументыСПС;
			
		
			//Инициализируем массив КлассификатораТНВЭД
			//для заполнения единицы измерения
			МассивТНВЭД = Новый Массив;
			КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД = МассивТНВЭД;
			
			//Инициализируем массив документов "ВозвратПодарочныхСертификатов"
			//для заполнения реквизита "РеализацияПодарочныхСертификатов"
			МассивВозвратыПС = Новый Массив; 
			КомпонентыОбмена.ПараметрыКонвертации.МассивВозвратыПСЗаполнитьОснование = МассивВозвратыПС;
			
			// Инициализируем таблицу Банков для заполнения реквизитов Банковских счетов.
			ТаблицаБанки = Новый ТаблицаЗначений;
			ТаблицаБанки.Колонки.Добавить("БИК");
			ТаблицаБанки.Колонки.Добавить("КоррСчет");
			ТаблицаБанки.Колонки.Добавить("Наименование");
			ТаблицаБанки.Колонки.Добавить("СВИФТБИК");
			ТаблицаБанки.Колонки.Добавить("Город");
			ТаблицаБанки.Колонки.Добавить("Адрес");
			ТаблицаБанки.Колонки.Добавить("ИностранныйБанк");
			ТаблицаБанки.Колонки.Добавить("Телефоны");
			ТаблицаБанки.Колонки.Добавить("Страна");
			КомпонентыОбмена.ПараметрыКонвертации.ТаблицаБанки = ТаблицаБанки;
			
			// Инициализируем таблицу ПартииТМЦ.
			ТаблицаПартииТМЦ = Новый ТаблицаЗначений;
			ТаблицаПартииТМЦ.Колонки.Добавить("ДокументПередачи", Новый ОписаниеТипов("ДокументСсылка.ВнутреннееПотреблениеТоваров"));
			ТаблицаПартииТМЦ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
			ТаблицаПартииТМЦ.Колонки.Добавить("ИнвентарныйНомер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
			ТаблицаПартииТМЦ.Колонки.Добавить("ПрочееОприходованиеТоваров", Новый ОписаниеТипов("ДокументСсылка.ПрочееОприходованиеТоваров"));
			ТаблицаПартииТМЦ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
			КомпонентыОбмена.ПараметрыКонвертации.ТаблицаПартииТМЦ = ТаблицаПартииТМЦ;
			
			СоответствиеПБДСВозвратЗарплатыРасшифровка = Новый Соответствие;
			КомпонентыОбмена.ПараметрыКонвертации.СоответствиеПБДСВозвратЗарплатыРасшифровка = СоответствиеПБДСВозвратЗарплатыРасшифровка;
	
			ПервичныеДокументы = Новый ТаблицаЗначений;
			ПервичныеДокументы.Колонки.Добавить("ПервичныйДокумент", Новый ОписаниеТипов("ДокументСсылка.ПервичныйДокумент"));
			ПервичныеДокументы.Колонки.Добавить("ТипПервичногоДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПервичныхДокументов"));
			КомпонентыОбмена.ПараметрыКонвертации.ПервичныеДокументы = ПервичныеДокументы;
			
			НоменклатураДляОтложеннойОбработки = Новый Массив;
			КомпонентыОбмена.ПараметрыКонвертации.НоменклатураДляОтложеннойОбработки = НоменклатураДляОтложеннойОбработки;
	
		ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
			ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты = Новый Массив;
			
			// Таблица выгруженных информативных остатков
			ТаблицаИнформативныеОстатки = Новый ТаблицаЗначений;
			ТаблицаИнформативныеОстатки.Колонки.Добавить("Период",  Новый ОписаниеТипов("Дата"));
			ТаблицаИнформативныеОстатки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
			ПараметрыКонвертации.ТаблицаИнформативныеОстатки = ТаблицаИнформативныеОстатки;
			
		КонецЕсли;
	Иначе
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение"
			И (КомпонентыОбмена.УзелКорреспондента = Неопределено 
			Или КомпонентыОбмена.КоличествоОбъектовКЗагрузке > 0) Тогда
			
			КомпонентыОбмена.ФлагОшибки = Истина;
			КомпонентыОбмена.ПравилаОбработкиДанных.Очистить();
			
			ВызватьИсключение НСтр("ru = 'Загрузка данных в формате EnterpriseData не предусмотрена.';
									|en = 'Cannot import data in EnterpriseData format.'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = Неопределено Тогда
			ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = Истина;
		КонецЕсли;
	
		Если ПараметрыКонвертации.СкладПоУмолчанию = Неопределено Тогда
			ПараметрыКонвертации.СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	
		Если ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Неопределено Тогда
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
		КонецЕсли;
		
		Если ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = Неопределено Тогда
			ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = Ложь;
		КонецЕсли;
	
	Иначе
		// Заполнение параметров из узла обмена.
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ВыгружатьАналитикуПоСкладам,СкладПоУмолчанию");
		ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = РеквизитыУзлаОбмена.ВыгружатьАналитикуПоСкладам;
		ПараметрыКонвертации.СкладПоУмолчанию = РеквизитыУзлаОбмена.СкладПоУмолчанию;
		
		Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
	
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
			ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = Ложь;
			
			ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты = Новый Массив;
	
		Иначе
	
			// Заполнение параметров из узла обмена.
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомпонентыОбмена.УзелКорреспондента,
				"ИспользоватьОтборПоОрганизациям,ВыгружатьУправленческуюОрганизацию");
	
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям;
			ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = РеквизитыУзлаОбмена.ВыгружатьУправленческуюОрганизацию;
	
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
			ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

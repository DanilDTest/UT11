Функция ПТиУ_РасширенныеДанныеИБ(КомпонентыОбмена, ДанныеИБ)
	Результат = Новый Структура;
				
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",    ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",      ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.Валюта);
	Запрос.УстановитьПараметр("ВалютаРег", ВалютаРеглУчета);
	
	ТекстыЗапросов = Новый Массив;
	
	#Область ФрагментЗапросаШапкаДокумента
	// Данные шапки документа необходимы для вычисления курса и кратности
	// взаиморасчетов и для вычисления розничных цен товаров.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Склад.РозничныйВидЦены КАК РозничныйВидЦены,
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов,
		|	ДанныеШапкиДокумента.Курс КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.Кратность КАК КратностьВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ДанныеШапкиДокумента.ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасовПоВидуОперации,
		|	ДанныеШапкиДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ДанныеШапкиДокумента.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапросов.Добавить(ШапкаДокумента);
	#КонецОбласти
	
	#Область ФрагментЗапросаДанныеОперации
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеОперации =
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ДанныеШапкиДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента";
	Иначе
		ДанныеОперации =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.Валюта
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.Валюта = КурсВалютыДокумента.Валюта";
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ДанныеОперации);
	#КонецОбласти
	
	#Область ФрагментЗапросаТоварыДокумента
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		// При поступлении по импорту номера ГТД присваиваются позже документом "Таможенная декларация".
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Серия КАК Серия,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Товары.Количество КАК Количество,
			|	Товары.Сумма КАК Сумма,
			|	ВЫБОР
			|		КОГДА Товары.Цена > 0
			|				И Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
			|			ТОГДА 0.01
			|		ИНАЧЕ Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
			|	КОНЕЦ КАК ЦенаЗаЕдиницу,
			|	Товары.Цена КАК ЦенаЗаУпаковку,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Товары.СтавкаНДС КАК СтавкаНДС,
			|	Товары.СуммаНДС КАК СуммаНДС,
			|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	Товары.СтатьяРасходов КАК СтатьяРасходов,
			|	Товары.СтатьяРасходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
			|	Товары.НомерГТД.Код КАК НомерГТД,
			|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
			|	Товары.Ссылка.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
			|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|	И Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
			|	ТаможеннаяДекларацияИмпортТовары.Характеристика КАК Характеристика,
			|	ТаможеннаяДекларацияИмпортТовары.Серия КАК Серия,
			|	ТаможеннаяДекларацияИмпортТовары.НомерГТД.Код КАК НомерГТД,
			|	ТаможеннаяДекларацияИмпортТовары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
			|	СУММА(ТаможеннаяДекларацияИмпортТовары.Количество) КАК Количество
			|ИЗ
			|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
			|ГДЕ
			|	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления = &Ссылка
			|	И ТаможеннаяДекларацияИмпортТовары.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаможеннаяДекларацияИмпортТовары.Номенклатура,
			|	ТаможеннаяДекларацияИмпортТовары.Характеристика,
			|	ТаможеннаяДекларацияИмпортТовары.Ссылка,
			|	ТаможеннаяДекларацияИмпортТовары.Серия,
			|	ТаможеннаяДекларацияИмпортТовары.НомерГТД.Код,
			|	ТаможеннаяДекларацияИмпортТовары.НомерГТД.СтранаПроисхождения";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
		ТаблицаГТД    = РезультатыЗапроса[1].Выгрузить();
		
		ТоварыРезультат = ТаблицаТовары.СкопироватьКолонки();
		
		// Выполним распределение.
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			КоличествоКРаспределению  = СтрокаТовары.Количество;
			КоличествоУпаковокОстаток = СтрокаТовары.КоличествоУпаковок;
			СуммаОстаток              = СтрокаТовары.Сумма;
			СуммаНДСОстаток           = СтрокаТовары.СуммаНДС;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			
			СтрокиГТД = ТаблицаГТД.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаГТД Из СтрокиГТД Цикл
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаРезультат = ТоварыРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТовары,,
					"Сумма, СуммаНДС, Количество, КоличествоУпаковок");
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаГТД,
					"НомерГТД, СтранаПроисхождения");
				
				СтрокаРезультат.Количество = Мин(КоличествоКРаспределению, СтрокаГТД.Количество);
				КоличествоКРаспределению = КоличествоКРаспределению - СтрокаРезультат.Количество;
				КоэффициентРаспределения = СтрокаРезультат.Количество / СтрокаТовары.Количество;
				
				СтрокаРезультат.Сумма = Окр(СтрокаТовары.Сумма * КоэффициентРаспределения, 2);
				СтрокаРезультат.СуммаНДС = Окр(СтрокаТовары.СуммаНДС * КоэффициентРаспределения, 2);
				СтрокаРезультат.КоличествоУпаковок = Окр(СтрокаТовары.КоличествоУпаковок * КоэффициентРаспределения, 3);
				
				СуммаОстаток              = СтрокаТовары.Сумма - СтрокаРезультат.Сумма;
				СуммаНДСОстаток           = СтрокаТовары.СуммаНДС - СтрокаРезультат.СуммаНДС;
				КоличествоУпаковокОстаток = СтрокаТовары.КоличествоУпаковок - СтрокаРезультат.КоличествоУпаковок;
			КонецЦикла;
			
			// Добавим товары, по которым еще нет ГТД.
			Если КоличествоКРаспределению > 0 Тогда
				СтрокаРезультат = ТоварыРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТовары,,
					"Сумма, СуммаНДС, Количество, КоличествоУпаковок");
				
				СтрокаРезультат.Количество = КоличествоКРаспределению;
			КонецЕсли;
			
			// Добавим суммовые остатки.
			СтрокаРезультат.Сумма = СуммаОстаток
				+ ?(ЗначениеЗаполнено(СтрокаРезультат.Сумма), СтрокаРезультат.Сумма, 0);
			СтрокаРезультат.СуммаНДС = СуммаНДСОстаток
				+ ?(ЗначениеЗаполнено(СтрокаРезультат.СуммаНДС), СтрокаРезультат.СуммаНДС, 0);
			СтрокаРезультат.КоличествоУпаковок = КоличествоУпаковокОстаток
				+ ?(ЗначениеЗаполнено(СтрокаРезультат.КоличествоУпаковок), СтрокаРезультат.КоличествоУпаковок, 0);
			
		КонецЦикла;
		
		ТоварыДокумента = 
			"ВЫБРАТЬ *
			|ПОМЕСТИТЬ ТоварыДокумента
			|ИЗ
			|	&ТоварыРезультат КАК Товары";
		Запрос.УстановитьПараметр("ТоварыРезультат", ТоварыРезультат);
		
		ТекстыЗапросов.Добавить(ТоварыДокумента);
	Иначе
		// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
		// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика.
		ТоварыДокумента = 
			"ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Серия КАК Серия,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Товары.Количество КАК Количество,
			|	Товары.Сумма КАК Сумма,
			|	ВЫБОР
			|		КОГДА Товары.Цена > 0
			|				И Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
			|			ТОГДА 0.01
			|		ИНАЧЕ Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
			|	КОНЕЦ КАК ЦенаЗаЕдиницу,
			|	Товары.Цена КАК ЦенаЗаУпаковку,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Товары.СтавкаНДС КАК СтавкаНДС,
			|	Товары.СуммаНДС КАК СуммаНДС,
			|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	Товары.СтатьяРасходов КАК СтатьяРасходов,
			|	Товары.НомерГТД.Код КАК НомерГТД,
			|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
			|	Товары.СтатьяРасходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
			|	Товары.Ссылка.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
			|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
			|ПОМЕСТИТЬ ТоварыДокумента
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|	И Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
		
		ТекстыЗапросов.Добавить(ТоварыДокумента);
	КонецЕсли;
	#КонецОбласти
	
	#Область ФрагментЗапросаЦеныВРознице
	// Информация о розничных ценах по розничному виду цен, установленному для склада.
	ЦеныВРознице =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЦеныВРознице.Цена 
		|	/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|	* ВЫБОР
		|		КОГДА ДанныеШапкиДокумента.Валюта = &ВалютаРег И ДанныеШапкиДокумента.ВалютаВзаиморасчетов = &ВалютаРег
		|			ТОГДА ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 1) / ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 1)
		|		КОГДА ДанныеШапкиДокумента.Валюта = &ВалютаРег ИЛИ ДанныеШапкиДокумента.ВалютаВзаиморасчетов = &ВалютаРег
		|			ТОГДА ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 1) * ЕСТЬNULL(ДанныеШапкиДокумента.КратностьВзаиморасчетов, 1) / (ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 1) * ЕСТЬNULL(ДанныеШапкиДокумента.КурсВзаиморасчетов, 1))
		|		КОГДА ЕСТЬNULL(КурсыВалютДокументаЦБ.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютДокументаЦБ.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 0) > 0
		|			ТОГДА КурсыВалютВидовЦены.Курс * КурсыВалютДокументаЦБ.Кратность / (КурсыВалютВидовЦены.Кратность * КурсыВалютДокументаЦБ.Курс)
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15,2))      КАК Цена,
		|	ЦеныВРознице.Номенклатура   КАК Номенклатура,
		|	ЦеныВРознице.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ЦеныВРознице
		|ИЗ                                      
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ВидЦены В
		|					(ВЫБРАТЬ
		|						ДанныеШапкиДокумента.РозничныйВидЦены
		|					ИЗ
		|						ДанныеШапкиДокумента КАК ДанныеШапкиДокумента)
		|				И Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварыДокумента.Номенклатура
		|					ИЗ
		|						ТоварыДокумента КАК ТоварыДокумента)
		|				И Характеристика В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварыДокумента.Характеристика
		|					ИЗ
		|						ТоварыДокумента КАК ТоварыДокумента)) КАК ЦеныВРознице
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютВидовЦены
		|		ПО ЦеныВРознице.Валюта = КурсыВалютВидовЦены.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокументаЦБ
		|		ПО ДанныеШапкиДокумента.Валюта = КурсыВалютДокументаЦБ.Валюта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика";
	
	ТекстыЗапросов.Добавить(ЦеныВРознице);
	#КонецОбласти
	
	#Область ФрагментЗапросаТоварыДокументаСЦенамиРозницы
	ТоварыДокументаСЦенамиРозницы =
		"ВЫБРАТЬ
		|	ТоварыДокумента.НомерСтрокиДокумента      КАК НомерСтрокиДокумента,
		|	ТоварыДокумента.Номенклатура              КАК Номенклатура,
		|	ТоварыДокумента.Характеристика            КАК Характеристика,
		|	ТоварыДокумента.Серия                     КАК Серия,
		|	ТоварыДокумента.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ТоварыДокумента.Количество                КАК Количество,
		|	ТоварыДокумента.Сумма                     КАК Сумма,
		|	ТоварыДокумента.ЦенаЗаЕдиницу             КАК Цена,
		|	ТоварыДокумента.ЦенаЗаУпаковку            КАК ЦенаЗаУпаковку,
		|	ТоварыДокумента.Упаковка                  КАК Упаковка,
		|	ТоварыДокумента.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ТоварыДокумента.СтавкаНДС                 КАК СтавкаНДС,
		|	ТоварыДокумента.СуммаНДС                  КАК СуммаНДС,
		|	ТоварыДокумента.ИдентификаторСтроки       КАК ИдентификаторСтроки,
		|	ТоварыДокумента.НомерГТД                  КАК НомерГТД,
		|	ТоварыДокумента.СтранаПроисхождения       КАК СтранаПроисхождения,
		|	ТоварыДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТоварыДокумента.ТипНоменклатуры           КАК ТипНоменклатуры,
		|
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныВРознице.Цена < 0.01
		|				ТОГДА 0.01
		|			ИНАЧЕ ВЫРАЗИТЬ(ЦеныВРознице.Цена КАК ЧИСЛО(15, 2))
		|		КОНЕЦ, 0)                             КАК ЦенаВРознице,
		|
		|	ТоварыДокумента.Количество 
		|	* ЕСТЬNULL(ЦеныВРознице.Цена, 0)		  КАК СуммаВРознице
		|
		|ПОМЕСТИТЬ ТоварыДокументаСЦенамиРозницы
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныВРознице КАК ЦеныВРознице
		|		ПО ТоварыДокумента.Номенклатура = ЦеныВРознице.Номенклатура
		|			И ТоварыДокумента.Характеристика = ЦеныВРознице.Характеристика";
	// В выборку попадает как товар, так и многооборотная тара (возвратная и не возвратная).
	
	ТекстыЗапросов.Добавить(ТоварыДокументаСЦенамиРозницы);
	#КонецОбласти
	
	#Область ФрагментЗапросаДанныеТаблицыТовары
	ДанныеТаблицыТовары =
		"ВЫБРАТЬ
		|	ТоварыДокументаРозн.НомерСтрокиДокумента      КАК НомерСтрокиДокумента,
		|	ТоварыДокументаРозн.Номенклатура              КАК Номенклатура,
		|	&ТекстЗапросаХарактеристика,
		|	&ТекстЗапросаУпаковка,
		|	&ТекстЗапросаСерия,
		|	ТоварыДокументаРозн.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ТоварыДокументаРозн.Количество                КАК Количество,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.СуммаВРознице КАК ЧИСЛО(15,2)) КАК СуммаВРознице,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.Сумма КАК ЧИСЛО(15,2))        КАК Сумма,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.Цена КАК ЧИСЛО(15,2))         КАК Цена,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.ЦенаВРознице КАК ЧИСЛО(15,2)) КАК ЦенаВРознице,
		|	ТоварыДокументаРозн.СтавкаНДС                 КАК СтавкаНДС,
		|	ТоварыДокументаРозн.СуммаНДС                  КАК СуммаНДС,
		|	ТоварыДокументаРозн.ИдентификаторСтроки       КАК ИдентификаторСтроки,
		|	ТоварыДокументаРозн.НомерГТД                  КАК НомерГТД,
		|	ТоварыДокументаРозн.СтранаПроисхождения       КАК СтранаПроисхождения,
		|	ТоварыДокументаРозн.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТоварыДокументаРозн.ТипНоменклатуры           КАК ТипНоменклатуры,
		|	ВЫБОР КОГДА ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|		И ТоварыДокументаРозн.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ
		|		ДанныеШапкиДокумента.ТипЗапасовПоВидуОперации
		|	КОНЕЦ                                         КАК ТипЗапасов
		|
		|ИЗ
		|	ТоварыДокументаСЦенамиРозницы КАК ТоварыДокументаРозн
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		ИЛИ ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыДокументаРозн.НомерСтрокиДокумента";
	
	ТекстыЗапросов.Добавить(ДанныеТаблицыТовары);
	#КонецОбласти
	
	#Область ФрагментЗапросаДанныеТаблицыУслуги
	// Работы и услуги.
	// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
	// Обмен не учитывает расхождения при поступлении работ и услуг, поэтому данные получаем из ТЧ Товары.
	ДанныеТаблицыУслуги =
		"ВЫБРАТЬ
		|	Товары.Номенклатура                                    КАК Номенклатура,
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК Строка(5)) = ""     "" Тогда
		|		Товары.Номенклатура.Наименование                       
		|	ИНАЧЕ ВЫРАЗИТЬ(Товары.Номенклатура.НаименованиеПолное КАК Строка(250)) КОНЕЦ КАК Содержание,
		|	Товары.Количество                                      КАК Количество,
		|	Товары.Сумма                                           КАК Сумма,
		|	ВЫБОР КОГДА Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
		|		ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 2)) 
		|	КОНЕЦ                                                  КАК Цена,
		|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
		|	Товары.СуммаНДС                                        КАК СуммаНДС,
		|	Товары.ИдентификаторСтроки                             КАК ИдентификаторСтроки,
		|   Товары.СтатьяРасходов                                  КАК СтатьяЗатрат,
		|   Товары.Подразделение                                   КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Товары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                  КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
	
	ТекстыЗапросов.Добавить(ДанныеТаблицыУслуги);
	#КонецОбласти
	
	
	#Область МаркировкиУпаковки
	
	ТекстЗапросаМаркировкиУпаковки = 
		"ВЫБРАТЬ
		|	ПриобретениеТоваровУслугШтрихкодыУпаковок.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
		|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ПОМЕСТИТЬ втШтрихкодыУпаковок
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
		|ГДЕ
		|	НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|	И ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШтрихкодыУпаковок.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	втШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
		|	&ТекстЗапросаХарактеристикаАкцизныеМарки,
		|	&ТекстЗапросаСерияАкцизныеМарки,
		|	&ТекстЗапросаУпаковкаАкцизныеМарки,
		|	&ТипАкцизнойМарки,
		|	втШтрихкодыУпаковок.ЗначениеШтрихкода КАК НомерАкцизнойМарки
		|ИЗ
		|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
		|ГДЕ
		|	втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШтрихкодыУпаковок.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	втШтрихкодыУпаковок.ШтрихкодУпаковки КАК МаркировкаУпаковки
		|ИЗ
		|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
		|ГДЕ
		|	НЕ втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|	И НЕ втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)";
	
		ТекстыЗапросов.Добавить(ТекстЗапросаМаркировкиУпаковки);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныВРознице.Упаковка",
		"ЦеныВРознице.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаХарактеристикаАкцизныеМарки",
		ПолучитьТекстЗапросаХарактеристики(КомпонентыОбмена, "втШтрихкодыУпаковок"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаСерияАкцизныеМарки",
		ПолучитьТекстЗапросаСерии(КомпонентыОбмена, "втШтрихкодыУпаковок"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУпаковкаАкцизныеМарки",
		ПолучитьТекстЗапросаУпаковки(КомпонентыОбмена, "втШтрихкодыУпаковок", Ложь));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаХарактеристика",
		ПолучитьТекстЗапросаХарактеристики(КомпонентыОбмена, "ТоварыДокументаРозн"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУпаковка",
		ПолучитьТекстЗапросаУпаковки(КомпонентыОбмена, "ТоварыДокументаРозн"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаСерия",
		ПолучитьТекстЗапросаСерии(КомпонентыОбмена, "ТоварыДокументаРозн"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипАкцизнойМарки",
		ПолучитьТекстЗапросаТипАкцизнойМарки(КомпонентыОбмена, "втШтрихкодыУпаковок"));
		
	Запрос.Текст = ТекстЗапроса;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	
	Результат.Вставить("КурсВзаиморасчетов",      1);
	Результат.Вставить("КратностьВзаиморасчетов", 1);
	
	Если ДанныеОперации.Следующий() Тогда
		Результат.КурсВзаиморасчетов      = ДанныеОперации.КурсВзаиморасчетов;
		Результат.КратностьВзаиморасчетов = ДанныеОперации.КратностьВзаиморасчетов;
	КонецЕсли;
	
	ТаблицаТовары             = РезультатыЗапроса[5].Выгрузить();
	ТаблицаУслуги             = РезультатыЗапроса[6].Выгрузить();
	ТаблицаАкцизныеМарки      = РезультатыЗапроса[8].Выгрузить();
	ТаблицаМаркировкиУпаковок = РезультатыЗапроса[9].Выгрузить();
	
	// Счет расходов для услуг.
	ТаблицаУслуги.Колонки.Добавить("СчетЗатрат");
	ТаблицаУслуги.Колонки.Добавить("ПодразделениеЗатрат");
	Для Каждого СтрокаУслуги Из ТаблицаУслуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаУслуги.Подразделение);
			СтрокаУслуги.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.СтатьяЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУслуги.СчетЗатрат = СчетУчетаПоСтатье(СтрокаУслуги.СтатьяЗатрат, ДанныеИБ.Организация, СтрокаУслуги.Подразделение);
	КонецЦикла;
	
	Результат.Вставить("Товары",             ТаблицаТовары);
	Результат.Вставить("Услуги",             ТаблицаУслуги);
	Результат.Вставить("АкцизныеМарки",      ТаблицаАкцизныеМарки);
	Результат.Вставить("МаркировкиУпаковок", ТаблицаМаркировкиУпаковок);
	Результат.Вставить("Излишки",            Новый ТаблицаЗначений);
	Результат.Вставить("Недостачи",          Новый ТаблицаЗначений);
	
	// РасшифровкаДопРасходов
	// Номенклатура, Количество, СтоимостьТоваров, Сумма, СуммаНДС, ДокументПоступления.
	РасшифровкаДопРасходов = ДоходыИРасходыСервер.РаспределениеРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	
	// Удаление строк с пустыми суммами из расшифровки.
	КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
		Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
		Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
			РасшифровкаДопРасходов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	Возврат Результат;
КонецФункции

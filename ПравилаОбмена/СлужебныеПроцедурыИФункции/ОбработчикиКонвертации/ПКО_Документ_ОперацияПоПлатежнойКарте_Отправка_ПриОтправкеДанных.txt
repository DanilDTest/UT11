Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	// Эквайрер.
	ДанныеXDTO.Вставить("Эквайрер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Эквайер"));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ЭквайринговыйТерминал)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ЭквайринговыйТерминал) Тогда
		
		ДанныеЭТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Код, Ссылка");
		ЭквайринговыйТерминал = Новый Структура("Номер, Ссылка", СокрЛП(ДанныеЭТ.Код), ДанныеЭТ.Ссылка);
		ДанныеXDTO.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	КонецЕсли;
	
	#Область Подразделение
	БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "БанковскийСчет");
	
	Подразделение = ?(ЗначениеЗаполнено(БанковскийСчет),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Подразделение"), Неопределено);
	
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		
		РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
		
		СтруктураДанныеПодразделения = Новый Структура(
			"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
			Подразделение.Наименование,
			РегистрацияПодразделенияВНалоговомОргане);
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", СтруктураДанныеПодразделения);
		Инструкция.Вставить("ИмяПКО", "Справочник_Подразделения_ИзСтруктуры");
		
		ДанныеXDTO.Вставить("Подразделение", Инструкция);
		
	Иначе
		ДанныеXDTO.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	РасшифровкаПлатежа.Сумма КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.Заказ КАК Заказ,
		|	РасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаНДС
		|ПОМЕСТИТЬ ДанныеТЧ
		|ИЗ
		|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЧ.Сумма,
		|	ДанныеТЧ.СуммаВзаиморасчетов,
		|	ДанныеТЧ.ВалютаВзаиморасчетов,
		|	ДанныеТЧ.Заказ КАК ЗаказСсылка,
		|	ДанныеТЧ.СтатьяДДС,
		|	КурсыВалют.Курс КАК КурсВзаиморасчетов,
		|	КурсыВалют.Кратность КАК КратностьВзаиморасчетов,
		|	ДанныеТЧ.СтавкаНДС,
		|	ДанныеТЧ.СуммаНДС
		|ИЗ
		|	ДанныеТЧ КАК ДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ДанныеТЧ.ВалютаВзаиморасчетов
		|					ИЗ
		|						ДанныеТЧ)) КАК КурсыВалют
		|		ПО (КурсыВалют.Валюта = ДанныеТЧ.ВалютаВзаиморасчетов)";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("СпособПогашенияЗадолженности");
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		// Вычисление договора.
		ВидДоговора = Неопределено;
		РасчетыВУЕ = Неопределено;
	
		Если НЕ ЗначениеЗаполнено(Строка.ЗаказСсылка) Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ТипЗаказа = ТипЗнч(Строка.ЗаказСсылка);
			
			ДоговорСсылка = Неопределено;
			Если ТипЗаказа = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорСсылка = Строка.ЗаказСсылка;
			Иначе
				Если Строка.ЗаказСсылка.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					ДоговорСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЗаказСсылка, "Договор");
				КонецЕсли;
				
				ИмяПКО = ИмяПКОДляОбъектаДанных(КомпонентыОбмена, Строка.ЗаказСсылка, ДанныеИБ.Организация);
				Если ЗначениеЗаполнено(ИмяПКО) Тогда
					Если ТипЗаказа = Тип("ДокументСсылка.ЗаказКлиента")
						ИЛИ ТипЗаказа = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
						ИмяСвойстваЗаказ = "Заказ";
					Иначе
						ИмяСвойстваЗаказ = "ДокументРасчетов";
						Строка.СпособПогашенияЗадолженности = "ПоДокументу";
					КонецЕсли;
					
					Строка[ИмяСвойстваЗаказ] = Новый Структура("Значение, ИмяПКО", 
						Строка.ЗаказСсылка, ИмяПКО);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
				Строка.Договор = Новый Структура("Значение, ИмяПКО",
					ДоговорСсылка, "Справочник_ДоговорыКонтрагентов");
				Продолжить;
			КонецЕсли;
		
			// Тип заказа может быть одним из следующих;
			//	- ДокументСсылка.ЗаказКлиента,
			//	- ДокументСсылка.РеализацияТоваровУслуг,
			//	- ДокументСсылка.АктВыполненныхРабот,
			//	- ДокументСсылка.ОтчетКомиссионера,
			//	- ДокументСсылка.ОтчетКомиссионераОСписании,
			//	- ДокументСсылка.ОтчетКомитенту,
			//	- ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями,
			//	- ДокументСсылка.ПередачаТоваровМеждуОрганизациями.
			
			Если ТипЗаказа = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				ВидДоговора = "СКомиссионером";
			ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
				или Строка.ЗаказСсылка.Метаданные().Реквизиты.Найти("Соглашение") = Неопределено Тогда
				ВидДоговора = "СПокупателем";
			Иначе
				
				// Соглашение может быть получено для всех вариантов операции.
				Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЗаказСсылка, "Соглашение");
				
				// Для продолжения анализа операции, необходимо определить вид договора.
				ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(Строка.ЗаказСсылка, Соглашение, ДанныеИБ.ХозяйственнаяОперация);
				ВидДоговора = ?(ЗначениеЗаполнено(ВидДоговора), ВидДоговора, "СПоставщиком");
				
				Если ВидДоговора = "СКомитентом" ИЛИ ВидДоговора = "СКомиссионером" Тогда
					// Договора по комиссии выгружаются без разделения по сделкам и заказам и всегда не в у.е.
					РасчетыВУЕ = Ложь;
				Иначе
					Если ЗначениеЗаполнено(Соглашение) Тогда
						РасчетыВУЕ = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетыВУЕ = Неопределено Тогда
			РасчетыВУЕ = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> Строка.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = Строка.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВидДоговора;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУЕ;
		Строка.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Строка.ЗаказСсылка, ДанныеИБ);
	КонецЦикла;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.Свойство("ВыгружатьУдалениеПоСсылке") Тогда
			ИспользованиеПКО.Документ_АвансовыйОтчет_Отправка = Ложь;
		Иначе
			ИспользованиеПКО.Удалить("Документ_АвансовыйОтчет_Отправка");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОчиститьИспользованиеПКО(ИспользованиеПКО);
	
	ПравилоАвансовыйОтчет = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_АвансовыйОтчет", "Имя");
	Если ПравилоАвансовыйОтчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПриобретениеТоваровУслуг.Ссылка КАК ПриобретениеТоваровУслуг,
		|	ПриобретениеТоваровУслуг.Склад КАК Склад,
		|	ПриобретениеТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.Ссылка) КАК СчетФактура
		|ПОМЕСТИТЬ втДокументыПриобретения
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ПО ПриобретениеТоваровУслуг.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
		|			И (СчетФактураПолученныйДокументыОснования.Ссылка.Проведен)
		|ГДЕ
		|	ПриобретениеТоваровУслуг.АвансовыйОтчет = &Ссылка
		|	И ПриобретениеТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслуг.Ссылка,
		|	ПриобретениеТоваровУслуг.Склад,
		|	ПриобретениеТоваровУслуг.ЦенаВключаетНДС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПриобретениеТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА втДокументыПриобретения.ЦенаВключаетНДС
		|			ТОГДА Товары.Сумма
		|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА Товары.Количество > 0
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА втДокументыПриобретения.ЦенаВключаетНДС
		|							ТОГДА Товары.Сумма
		|						ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|					КОНЕЦ / Товары.Количество КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА Товары.КоличествоУпаковок > 0
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА втДокументыПриобретения.ЦенаВключаетНДС
		|							ТОГДА Товары.Сумма
		|						ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|					КОНЕЦ / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЦенаЗаУпаковку,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СтатьяРасходов КАК СтатьяРасходов,
		|	Товары.НомерГТД.Код КАК НомерГТД,
		|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	Товары.СтатьяРасходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
		|	Товары.Ссылка.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.Подразделение КАК Подразделение,
		|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Товары.Ссылка.Контрагент КАК Поставщик,
		|	Товары.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	Товары.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	Товары.Ссылка.Валюта КАК Валюта,
		|	Товары.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредъявленСФ,
		|	СчетФактураПолученный.ДатаСоставления КАК ДатаСФ,
		|	СчетФактураПолученный.Номер КАК НомерСФ
		|ПОМЕСТИТЬ втТоварыУслуги
		|ИЗ
		|	втДокументыПриобретения КАК втДокументыПриобретения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|		ПО втДокументыПриобретения.ПриобретениеТоваровУслуг = Товары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ПО втДокументыПриобретения.СчетФактура = СчетФактураПолученный.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугШтрихкодыУпаковок.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
		|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ПОМЕСТИТЬ втШтрихкодыУпаковок
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыПриобретения КАК втДокументыПриобретения
		|		ПО ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = втДокументыПриобретения.ПриобретениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
		|ГДЕ
		|	НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втДокументыПриобретения.Склад КАК Склад
		|ИЗ
		|	втДокументыПриобретения КАК втДокументыПриобретения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	втТовары.Номенклатура КАК Номенклатура,
		|	&ТекстЗапросаХарактеристика,
		|	&ТекстЗапросаУпаковка,
		|	&ТекстЗапросаСерия,
		|	втТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	втТовары.Количество КАК Количество,
		|	втТовары.Сумма КАК Сумма,
		|	втТовары.Цена КАК Цена,
		|	втТовары.СтавкаНДС КАК СтавкаНДС,
		|	втТовары.СуммаНДС КАК СуммаНДС,
		|	втТовары.СтатьяРасходов КАК СтатьяРасходов,
		|	втТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	втТовары.НомерГТД КАК НомерГТД,
		|	втТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	втТовары.Поставщик КАК Поставщик,
		|	втТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	втТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	втТовары.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА втТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И втТовары.ВернутьМногооборотнуюТару
		|			ТОГДА ""ВозвратнаяТара""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|					ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|				ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|			КОНЕЦ
		|	КОНЕЦ КАК ТипЗапасов,
		|	втТовары.ПредъявленСФ КАК ПредъявленСФ,
		|	втТовары.ДатаСФ КАК ДатаСФ,
		|	втТовары.НомерСФ КАК НомерСФ
		|ИЗ
		|	втТоварыУслуги КАК втТовары
		|ГДЕ
		|	втТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	NULL КАК Номенклатура,
		|	АвансовыйОтчетПрочиеРасходы.Контрагент КАК Поставщик,
		|	АвансовыйОтчетПрочиеРасходы.Сумма КАК Сумма,
		|	АвансовыйОтчетПрочиеРасходы.СтавкаНДС КАК СтавкаНДС,
		|	АвансовыйОтчетПрочиеРасходы.СуммаНДС КАК СуммаНДС,
		|	АвансовыйОтчетПрочиеРасходы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	АвансовыйОтчетПрочиеРасходы.Подразделение КАК Подразделение,
		|	АвансовыйОтчетПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	АвансовыйОтчетПрочиеРасходы.СчетУчета КАК СчетУчета,
		|	АвансовыйОтчетПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	АвансовыйОтчетПрочиеРасходы.ПредъявленСФ КАК ПредъявленСФ,
		|	АвансовыйОтчетПрочиеРасходы.ДатаСФ КАК ДатаСФ,
		|	АвансовыйОтчетПрочиеРасходы.НомерСФ КАК НомерСФ,
		|	АвансовыйОтчетПрочиеРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	АвансовыйОтчетПрочиеРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	АвансовыйОтчетПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента,
		|	АвансовыйОтчетПрочиеРасходы.Содержание КАК Содержание,
		|	АвансовыйОтчетПрочиеРасходы.Валюта КАК Валюта
		|ИЗ
		|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК АвансовыйОтчетПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ПО (СтатьиРасходов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
		|		ПО (СтатьиАктивовПассивов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
		|ГДЕ
		|	АвансовыйОтчетПрочиеРасходы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втУслуги.Номенклатура,
		|	втУслуги.Поставщик,
		|	втУслуги.Сумма,
		|	втУслуги.СтавкаНДС,
		|	втУслуги.СуммаНДС,
		|	NULL,
		|	втУслуги.Подразделение,
		|	втУслуги.СтатьяРасходов,
		|	NULL,
		|	втУслуги.ИдентификаторСтроки,
		|	втУслуги.ПредъявленСФ,
		|	втУслуги.ДатаСФ,
		|	втУслуги.НомерСФ,
		|	втУслуги.НомерВходящегоДокумента,
		|	втУслуги.ДатаВходящегоДокумента,
		|	NULL,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(втУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(5))) = ""     ""
		|			ТОГДА втУслуги.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(втУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(250))
		|	КОНЕЦ,
		|	втУслуги.Валюта
		|ИЗ
		|	втТоварыУслуги КАК втУслуги
		|ГДЕ
		|	(втУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ втУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетОплатаПоставщикам.Контрагент КАК Контрагент,
		|	АвансовыйОтчетОплатаПоставщикам.Сумма КАК Сумма,
		|	АвансовыйОтчетОплатаПоставщикам.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	АвансовыйОтчетОплатаПоставщикам.Комментарий КАК Содержание,
		|	АвансовыйОтчетОплатаПоставщикам.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	АвансовыйОтчетОплатаПоставщикам.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	АвансовыйОтчетОплатаПоставщикам.Заказ КАК Заказ,
		|	АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалюты.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалюты.Кратность, 1) КАК КратностьВзаиморасчетов,
		|	АвансовыйОтчетОплатаПоставщикам.Валюта КАК Валюта
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсВалюты
		|		ПО АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов = КурсВалюты.Валюта
		|ГДЕ
		|	АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШтрихкодыУпаковок.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	втШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
		|	&ТипАкцизнойМарки,
		|	&ТекстЗапросаХарактеристикаАкцизныеМарки,
		|	&ТекстЗапросаСерияАкцизныеМарки,
		|	&ТекстЗапросаУпаковкаАкцизныеМарки,
		|	втШтрихкодыУпаковок.ЗначениеШтрихкода КАК НомерАкцизнойМарки
		|ИЗ
		|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
		|ГДЕ
		|	втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШтрихкодыУпаковок.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	втШтрихкодыУпаковок.ШтрихкодУпаковки КАК МаркировкаУпаковки
		|ИЗ
		|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
		|ГДЕ
		|	НЕ втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|	И НЕ втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаХарактеристикаАкцизныеМарки",
		ПолучитьТекстЗапросаХарактеристики(КомпонентыОбмена, "втШтрихкодыУпаковок"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаСерияАкцизныеМарки",
		ПолучитьТекстЗапросаСерии(КомпонентыОбмена, "втШтрихкодыУпаковок"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУпаковкаАкцизныеМарки",
		ПолучитьТекстЗапросаУпаковки(КомпонентыОбмена, "втШтрихкодыУпаковок", Ложь));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаХарактеристика",
		ПолучитьТекстЗапросаХарактеристики(КомпонентыОбмена, "втТовары"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУпаковка",
		ПолучитьТекстЗапросаУпаковки(КомпонентыОбмена, "втТовары"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаСерия",
		ПолучитьТекстЗапросаСерии(КомпонентыОбмена, "втТовары"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипАкцизнойМарки",
		ПолучитьТекстЗапросаТипАкцизнойМарки(КомпонентыОбмена, "втШтрихкодыУпаковок"));
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",    ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",      ДанныеИБ.Дата);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапкиПриобретения	= РезультатыЗапроса[РезультатыЗапроса.Количество() - 6].Выбрать();
	Товары					= РезультатыЗапроса[РезультатыЗапроса.Количество() - 5].Выгрузить();
	ПрочиеРасходы			= РезультатыЗапроса[РезультатыЗапроса.Количество() - 4].Выгрузить();
	ОплатаКонтрагентам		= РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выгрузить();
	АкцизныеМарки			= РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	МаркировкиУпаковок		= РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();
	
	Склад = Неопределено;
	Если ДанныеШапкиПриобретения.Следующий() Тогда
		Склад = ДанныеШапкиПриобретения.Склад;
	КонецЕсли;
	
	ЗаполнитьХарактеристикуУпаковкуВТЧ(КомпонентыОбмена, Товары);
	ЗаполнитьХарактеристикуУпаковкуВТЧ(КомпонентыОбмена, АкцизныеМарки);
	ЗаполнитьВидДеятельностиНДСВТЧ(КомпонентыОбмена, ДанныеИБ, Товары, "ЗакупкаПодДеятельность", "ЗакупкаПодДеятельность");
	
	#Область ПрочиеРасходы
	
	ПрочиеРасходы.Колонки.Добавить("ПодразделениеЗатрат");
	ПрочиеРасходы.Колонки.Добавить("СчетЗатрат");
	ПрочиеРасходы.Колонки.Добавить("СтатьяЗатрат");
	Для Каждого СтрокаПрочее Из ПрочиеРасходы Цикл
		Если ЗначениеЗаполнено(СтрокаПрочее.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаПрочее.Подразделение);
			СтрокаПрочее.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СтрокаПрочее.СчетУчета) Тогда
			СчетЗатрат = СчетУчетаПоСтатье(СтрокаПрочее.СтатьяРасходов, ДанныеИБ.Организация, СтрокаПрочее.Подразделение, СтрокаПрочее.СчетУчета);
		Иначе
			СчетЗатрат = СчетУчетаПоСтатье(СтрокаПрочее.СтатьяРасходов, ДанныеИБ.Организация, СтрокаПрочее.Подразделение);
		КонецЕсли;
	
		Если ТипЗнч(СтрокаПрочее.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаПрочее.СтатьяЗатрат = СтрокаПрочее.СтатьяРасходов;
		КонецЕсли;
		СтрокаПрочее.СчетЗатрат = СчетЗатрат;
	КонецЦикла;
	
	ЗаполнитьВидДеятельностиНДСВТЧ(КомпонентыОбмена, ДанныеИБ, ПрочиеРасходы, "ЗакупкаПодДеятельность", "ЗакупкаПодДеятельность");
	
	#КонецОбласти
	
	
	#Область ОплатаКонтрагентам
	
	// Заполнение договора
	ОплатаКонтрагентам.Колонки.Добавить("Договор");
	Для Каждого СтрокаТаблицы Из ОплатаКонтрагентам Цикл
		ТекДоговор = Неопределено;
		РасчетыВУсловныхЕдиницах = Ложь;
		Соглашение = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТекДоговор = СтрокаТаблицы.Заказ;
			КонецЕсли;
				
			Если ТекДоговор = Неопределено Тогда
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					ТекДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Договор");
				Иначе
					// Не удалось определить договор из заказа. Договор будет вычислен позже.
					ТекДоговор = Неопределено;
				КонецЕсли;
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
					Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Соглашение");
				Иначе
					// Не удалось определить соглашение из заказа. Соглашение будет вычислено позже.
					Соглашение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТекДоговор <> Неопределено И ЗначениеЗаполнено(ТекДоговор) Тогда
			СтрокаТаблицы.Договор = ТекДоговор;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = СтрокаТаблицы.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", СтрокаТаблицы.Заказ, Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		СтрокаТаблицы.Договор = Договор;
	КонецЦикла;
	
	#КонецОбласти
	
	
	#Область ВыданныеАвансы
	
	ВыданныеАвансы = Новый ТаблицаЗначений;
	ВыданныеАвансы.Колонки.Добавить("Документ");
	ВыданныеАвансы.Колонки.Добавить("Сумма");
	ВыданныеАвансы.Колонки.Добавить("Валюта");
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ДокументОснование)Тогда
	
		ИмяПКО = "";
		Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
		ИначеЕсли ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяПКО) Тогда
			Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО);
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДокументОснование, "Валюта, СуммаДокумента");
			
			СтрокаАванс = ВыданныеАвансы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАванс, РеквизитыОснования);
			СтрокаАванс.Документ = Инструкция;
			
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	ДополнительныеРеквизиты = ДанныеИБ.ДополнительныеРеквизиты.Выгрузить();
	
	Если Не ДанныеИБ.Мультивалютный Тогда
		ДанныеИБСтруктура = Новый Структура("Ссылка, Номер, Дата, Организация, Подразделение, Валюта, 
		|КоличествоДокументов, КоличествоЛистов, Комментарий, НазначениеАванса, ПодотчетноеЛицо, ДокументОснование, ЗакупкаПодДеятельность");
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		
		ДанныеИБСтруктура.Вставить("Ответственный",           ДанныеИБ.Автор);
		ДанныеИБСтруктура.Вставить("Товары",                  Товары);
		ДанныеИБСтруктура.Вставить("ПрочиеРасходы",           ПрочиеРасходы);
		ДанныеИБСтруктура.Вставить("ОплатаКонтрагентам",      ОплатаКонтрагентам);
		ДанныеИБСтруктура.Вставить("ВыданныеАвансы",          ВыданныеАвансы);
		ДанныеИБСтруктура.Вставить("АкцизныеМарки",           АкцизныеМарки);
		ДанныеИБСтруктура.Вставить("МаркировкиУпаковок",      МаркировкиУпаковок);
		ДанныеИБСтруктура.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		Если ЗначениеЗаполнено(Склад) Тогда
			ДанныеИБСтруктура.Вставить("Склад", Склад);
		КонецЕсли;
		
		RM_ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			ДанныеИБСтруктура, 
			ПравилоАвансовыйОтчет);
	Иначе
		МассивВалют = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют,
			Товары.ВыгрузитьКолонку("Валюта"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют,
			ПрочиеРасходы.ВыгрузитьКолонку("Валюта"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют,
			ОплатаКонтрагентам.ВыгрузитьКолонку("Валюта"), Истина);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта,
		|	ЕСТЬNULL(ПОДСТРОКА(Валюты.Наименование, 1, 2), """") КАК ПрефиксВалюты
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Ссылка В(&Валюты)");
		Запрос.УстановитьПараметр("Валюты", МассивВалют);
	
		ВалютыДокумента = Запрос.Выполнить().Выгрузить();
		
		ВалютаРеглУчета   = ВалютаРегламентированногоУчета(КомпонентыОбмена);
		ВыгружатьУдаление = (ВалютыДокумента.Найти(ВалютаРеглУчета, "Валюта") = Неопределено);
		
		Для Каждого ВалютаДокумента Из ВалютыДокумента Цикл
			
			ОтборПоВалюте = Новый Структура("Валюта", ВалютаДокумента.Валюта);
			
			ТоварыПоВалюте             = Товары.Скопировать(ОтборПоВалюте);
			ПрочиеРасходыПоВалюте      = ПрочиеРасходы.Скопировать(ОтборПоВалюте);
			ОплатаКонтрагентамПоВалюте = ОплатаКонтрагентам.Скопировать(ОтборПоВалюте);
			ВыданныеАвансыПоВалюте     = ВыданныеАвансы.Скопировать(ОтборПоВалюте);
			
			ДанныеИБСтруктура = Новый Структура("Номер, Дата, Организация, Подразделение,
			|КоличествоДокументов, КоличествоЛистов, Комментарий, НазначениеАванса, ПодотчетноеЛицо, ДокументОснование, ЗакупкаПодДеятельность");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			Если ВалютаДокумента.Валюта = ВалютаРеглУчета Тогда
				ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
			Иначе
				НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ДанныеИБ.Номер, Истина, Истина);
				СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
				ПрефиксНомера = СтандартныеПрефиксы + ВалютаДокумента.ПрефиксВалюты;
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
				Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
					ДанныеИБСтруктура.Номер = ПрефиксНомера
						+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
				КонецЕсли;
			КонецЕсли;
			
			ДанныеИБСтруктура.Вставить("Ответственный",           ДанныеИБ.Автор);
			ДанныеИБСтруктура.Вставить("Валюта",                  ВалютаДокумента.Валюта);
			ДанныеИБСтруктура.Вставить("Товары",                  ТоварыПоВалюте);
			ДанныеИБСтруктура.Вставить("ПрочиеРасходы",           ПрочиеРасходыПоВалюте);
			ДанныеИБСтруктура.Вставить("ОплатаКонтрагентам",      ОплатаКонтрагентамПоВалюте);
			ДанныеИБСтруктура.Вставить("ВыданныеАвансы",          ВыданныеАвансыПоВалюте);
			ДанныеИБСтруктура.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
			Если ЗначениеЗаполнено(Склад) Тогда
				ДанныеИБСтруктура.Вставить("Склад", Склад);
			КонецЕсли;
			
			Если ВыгружатьУдаление Тогда
				ДанныеИБСтруктура.Вставить("ВыгружатьУдалениеПоСсылке", Истина);
				ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
				ВыгружатьУдаление = Ложь;
			КонецЕсли;
			
			RM_ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоАвансовыйОтчет);
		КонецЦикла;
	КонецЕсли;
	
	ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
КонецПроцедуры

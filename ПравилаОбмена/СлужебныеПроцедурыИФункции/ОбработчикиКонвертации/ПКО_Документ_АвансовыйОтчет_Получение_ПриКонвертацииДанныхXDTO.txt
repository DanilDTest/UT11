Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ОплатаПоставщикам
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Контрагент",              "Контрагент");
	ПравилаЗаполнения.Вставить("Сумма",                   "Сумма");
	ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
	ПравилаЗаполнения.Вставить("Содержание",              "Комментарий");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	
	МассивСтрокОплатаПоставщикам = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаКонтрагентам")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаКонтрагентам) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаКонтрагентам Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// Валюта взаиморасчетов
			Если ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) Тогда
				Если ТипЗнч(Строка.ВалютаВзаиморасчетов) = Тип("Структура")
					И Не Строка.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
					ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
				Иначе
					ИмяПКО = "Справочник_Валюты";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", Строка.ВалютаВзаиморасчетов, ИмяПКО));
			КонецЕсли;
			
			// Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура")
					И Не Строка.Договор.Свойство("Ссылка") Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
				Иначе
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
	
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	#КонецОбласти
	
	#Область Прочее
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Содержание",              "Комментарий");
	ПравилаЗаполнения.Вставить("Поставщик",               "Контрагент");
	ПравилаЗаполнения.Вставить("Сумма",                   "Сумма");
	ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
	ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ПравилаЗаполнения.Вставить("ПодразделениеЗатрат",     "Подразделение");
	ПравилаЗаполнения.Вставить("СтатьяЗатрат",            "СтатьяЗатрат");
	ПравилаЗаполнения.Вставить("ПредъявленСФ",            "ПредъявленСФ");
	ПравилаЗаполнения.Вставить("ДатаСФ",                  "ДатаСФ");
	ПравилаЗаполнения.Вставить("НомерСФ",                 "НомерСФ");
	ПравилаЗаполнения.Вставить("ИдентификаторСтроки",     "ИдентификаторСтроки");
	
	МассивСтрокПрочее = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ПрочиеРасходы")
		И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("СтатьяЗатрат")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.СтатьяЗатрат) Тогда
				СтруктураДанныхСтроки.Вставить("СтатьяРасходов",
					Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиРасходов", СтруктураДанныхСтроки.СтатьяЗатрат));
			КонецЕсли;
			
			СуммаСНДС = СтруктураДанныхСтроки.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И ЗначениеЗаполнено(СтруктураДанныхСтроки.СуммаНДС) Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС;
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			
			МассивСтрокПрочее.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокПрочее.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПрочиеРасходы", МассивСтрокПрочее);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Товары
		
	Если ДанныеXDTO.Свойство("КлючиДокументовПоступления") Тогда
		// При включенной опции "Печать единого авансового отчета" и наличии в составе
		// табличной части "Товары" нескольких различных совокупностей полей
		// "Поставщик, ДатаВходящегоДокумента, НомерВходящегоДокумента" нет возможности
		// использовать отдельное ПКО в ПОД, т.к. объект распадается на множество ПТУ.
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
			|ГДЕ
			|	ПриобретениеТоваровУслуг.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
			|	И ПриобретениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
			|	И ПриобретениеТоваровУслуг.Организация = &Организация
			|	И &УсловиеПоставщик";
		
		СтруктураПоиска = Новый Структура(ДанныеXDTO.КлючевыеПоляПоступления);
		Для Каждого НаборКлючей Из ДанныеXDTO.КлючиДокументовПоступления Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, НаборКлючей);
			ТЧТовары = ДанныеXDTO.Товары.Скопировать(СтруктураПоиска);
			
			ПоступлениеИдентифицировано = Ложь;
			Поставщик = Неопределено;
			Если НЕ ДанныеXDTO.ЭтоНовыйАвансовыйОтчет
				И ЗначениеЗаполнено(СтруктураПоиска.ДатаВходящегоДокумента)
				И ЗначениеЗаполнено(СтруктураПоиска.НомерВходящегоДокумента) Тогда
				
				// Будем загружать поступления, которые можно явно идентифицировать
				// по ключевым полям.
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураПоиска.ДатаВходящегоДокумента);
				Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтруктураПоиска.НомерВходящегоДокумента);
				Запрос.УстановитьПараметр("Организация", ПолученныеДанные.Организация);
				
				// Попробуем найти документ поступления с учетом поставщика.
				Если ЗначениеЗаполнено(НаборКлючей.Поставщик) Тогда
					Поставщик = RM_ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						НаборКлючей.Поставщик,
						RM_ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
						"ПолучитьСсылку").Ссылка;
				
					Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоставщик", "ПриобретениеТоваровУслуг.Контрагент = &Контрагент");
					Запрос.УстановитьПараметр("Контрагент", Поставщик);
					
					ПоступлениеИдентифицировано = Запрос.Выполнить().Выбрать().Количество() = 1;
				КонецЕсли;
				
				Если НЕ ПоступлениеИдентифицировано Тогда
					// Попробуем найти документ поступления без учета поставщика.
					Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоставщик", "Истина");
					ПоступлениеИдентифицировано = Запрос.Выполнить().Выбрать().Количество() = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеXDTO.ЭтоНовыйАвансовыйОтчет ИЛИ ПоступлениеИдентифицировано Тогда
				СтруктураПТУ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеXDTO);
				СтруктураПТУ.Вставить("Товары", ТЧТовары);
				Если СтруктураПТУ.Свойство("Ссылка") Тогда
					СтруктураПТУ.Удалить("Ссылка");
				КонецЕсли;
				Если СтруктураПТУ.КлючевыеСвойства.Свойство("Ссылка") Тогда
					СтруктураПТУ.КлючевыеСвойства.Удалить("Ссылка");
				КонецЕсли;
				Если СтруктураПТУ.КлючевыеСвойства.Свойство("Номер") Тогда
					СтруктураПТУ.КлючевыеСвойства.Удалить("Номер");
				КонецЕсли;
				
				ПТУЧерезПодотчетноеЛицо = RM_ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					СтруктураПТУ,
					RM_ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПТУЧерезПодотчетноеЛицо_Получение"), 
					"КонвертироватьИЗаписать");
			Иначе
				ШаблонПредупреждения = НСтр("ru = 'Табличная часть ""Закупки"" документа %1 загружена не полностью,
					|т.к. не удалось однозначно идентифицировать и загрузить связанный документ ""Приобретение товаров и услуг""
					|с видом операции ""Закупка через подотчетное лицо"".
					|Вх. номер %2 от %3, поставщик: %4.';
					|en = 'The tabular section of the ""Purchasing"" document%1 is not fully loaded,
					| due to failure of unique identification and downloading of the related document ""Purchase of goods and services""
					| with the type of operation ""Purchase through an advance holder"". 
					|In. number%2 from%3, supplier:%4.'");
				
				ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения,
					ДанныеXDTO.АвансовыйОтчетСсылка,
					СтруктураПоиска.НомерВходящегоДокумента,
					СтруктураПоиска.ДатаВходящегоДокумента,
					Поставщик);
				
				КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
				RM_ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(
					КомпонентыОбмена, ТекстПредупреждения, Неопределено, Ложь);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "У" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	ВалютаРеглУчета = ВалютаРегламентированногоУчета(КомпонентыОбмена);
	
	Если ДанныеИБ.Валюта = ВалютаРеглУчета
		Или ДанныеИБ.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов",      ДанныеИБ.Курс);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеИБ.Кратность);
	Иначе
		ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ДанныеИБ.Валюта, ДанныеИБ.Дата);
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = ВалютаРеглУчета И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
		КонецЕсли;
	
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора              = "СПоставщиком";
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	//Услуги
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Расходы.Содержание,
		|	ВЫБОР КОГДА Расходы.Количество = 0 ТОГДА 1 ИНАЧЕ Расходы.Количество КОНЕЦ КАК Количество,
		|	Расходы.Цена,
		|	Расходы.Сумма,
		|	Расходы.СтавкаНДС,
		|	Расходы.СуммаНДС,
		|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
		|	Расходы.Подразделение КАК Подразделение,
		|	Расходы.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА Расходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|			ТОГДА 0
		|		ИНАЧЕ Расходы.СуммаСНДС
		|	КОНЕЦ КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА Расходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Услуги = Запрос.Выполнить().Выгрузить();
	Услуги.Колонки.Добавить("СчетЗатрат");
	Услуги.Колонки.Добавить("ПодразделениеЗатрат");
	Услуги.Колонки.Добавить("СтатьяЗатрат");
	
	// Заполнение счета затрат.
	Для Каждого СтрокаУслуги Из Услуги Цикл
		// Параметры №2,3 и 4 необходимы для вычисления счета затрат в УП/КА.
		СтрокаУслуги.СчетЗатрат = СчетУчетаПоСтатье(СтрокаУслуги.СтатьяРасходов, ДанныеИБ.Организация, СтрокаУслуги.Подразделение, СтрокаУслуги.СчетУчета);
		
		Если ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаУслуги.Подразделение);
			СтрокаУслуги.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУслуги.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаУслуги.СтатьяЗатрат = СтрокаУслуги.СтатьяРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НДСпоСтавкам4и2");
	ОпределитьСтавкуНДС_Отправка(Услуги, НДСПоСтавкам2и4);
	
	ДанныеXDTO.Вставить("Сумма", Услуги.Итог("Сумма"));
	
	РасшифровкаДопРасходов = ДоходыИРасходыСервер.РаспределениеРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	// Удаление строк с пустыми суммами из расшифровки.
	КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
		Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
		Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
			РасшифровкаДопРасходов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступления) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Услуги", Услуги);
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

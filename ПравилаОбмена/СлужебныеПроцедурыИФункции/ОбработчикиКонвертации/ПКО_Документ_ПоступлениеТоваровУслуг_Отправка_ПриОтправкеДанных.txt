Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ПТиУ_РасширенныеДанныеИБ(КомпонентыОбмена, ДанныеИБ);
	
	ДанныеXDTO.Вставить("КурсВзаиморасчетов",      РасширенныеДанныеИБ.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", РасширенныеДанныеИБ.КратностьВзаиморасчетов);
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	//Заказ
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаказПоставщику)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ЗаказПоставщику) Тогда
		
		Инструкция = Новый Структура("Значение, ИмяПКО",
					ДанныеИБ.ЗаказПоставщику,
					"Документ_ЗаказПоставщику_Отправка");
		ДанныеXDTO.Вставить("Заказ", Инструкция);
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// ВидОперации
	// При выключенной ФО "Использовать комиссию при продаже" реквизит "Хозяйственная операция"
	// может быть не заполнен, что означает обычную реализацию.
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути 
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути Тогда
		ДанныеXDTO.ВидОперации = "ЗакупкаПоИмпорту";
	Иначе
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию,
			"СКомитентом", "СПоставщиком");
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка",  ДанныеИБ.ЗаказПоставщику, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "НДСпоСтавкам4и2");
	
	// Товары
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
	    ОпределитьСтавкуНДС_Отправка(Товары, НДСПоСтавкам2и4);
		ЗаполнитьХарактеристикуУпаковкуВТЧ(КомпонентыОбмена, Товары);
	    ЗаполнитьВидДеятельностиНДСВТЧ(КомпонентыОбмена, ДанныеИБ, Товары, "ЗакупкаПодДеятельность", "ЗакупкаПодДеятельность");
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура.
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			// Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки.
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = RM_ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваровУслуг_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПоступлениеТоваровУслуг_Отправка");
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(Услуги, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	// Излишки
	Излишки = РасширенныеДанныеИБ.Излишки;
	Если Излишки.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(Излишки, НДСПоСтавкам2и4);	
		ДанныеXDTO.Вставить("Излишки", Излишки);
	КонецЕсли;
	
	// Недостачи
	Недостачи = РасширенныеДанныеИБ.Недостачи;
	Если Недостачи.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(Недостачи, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Недостачи", Недостачи);
	КонецЕсли;
	
	#Область АкцизныеМарки
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		АкцизныеМарки = РасширенныеДанныеИБ.АкцизныеМарки;	
		ЗаполнитьХарактеристикуУпаковкуВТЧ(КомпонентыОбмена, АкцизныеМарки);
		ДанныеXDTO.Вставить("АкцизныеМарки", АкцизныеМарки);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область МаркировкиУпаковок
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		МаркировкиУпаковок = РасширенныеДанныеИБ.МаркировкиУпаковок;	
		ДанныеXDTO.Вставить("МаркировкиУпаковок", МаркировкиУпаковок);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры

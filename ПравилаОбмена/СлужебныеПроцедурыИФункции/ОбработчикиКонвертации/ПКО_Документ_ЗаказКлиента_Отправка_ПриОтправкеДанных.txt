Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
			ДанныеXDTO.Вставить("ДатаВходящегоДокумента", ДанныеИБ.ДатаПоДаннымКлиента);
			ДанныеXDTO.Вставить("НомерВходящегоДокумента", ДанныеИБ.НомерПоДаннымКлиента);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.ДатаПоДаннымКлиента);
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", ДанныеИБ.НомерПоДаннымКлиента);
		
		ДанныеXDTO.Вставить("ОтгружатьЗаказЦеликом", ДанныеИБ.НеОтгружатьЧастями);
		ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, Ложь, "НалогообложениеНДСПродавца");
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Если ДанныеИБ.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
		Или ДанныеИБ.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада
		Или ДанныеИБ.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
			
		ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставкиПеревозчика);
	Иначе
		ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки);
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);  
	
	Партнер = ДанныеИБ.Партнер;
	Если ЗначениеЗаполнено(Партнер) Тогда
			
		ПартнерНаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "НаименованиеПолное");	
		ПартнерТелефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Партнер, Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
		  	
		ДанныеXDTO.Вставить("КонтрагентИмя", ПартнерНаименованиеПолное);
		ДанныеXDTO.Вставить("КонтрагентТелефон", ПартнерТелефон);
	
	КонецЕсли;                       
	
	ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Договор, "ПорядокОплаты, ВалютаВзаиморасчетов");
		
		ДанныеXDTO.Вставить("Договор",                  ДанныеИБ.Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", (СвойстваДоговора.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях));
		
		ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.ХозяйственнаяОперация);
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		
		Если ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером" Тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		Иначе
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("ОжидаемаяДатаПоступления", ДанныеИБ.ДатаОтгрузки);
	ДанныеXDTO.Вставить("СпособДоставки", ДанныеИБ.СпособДоставки);
	ДанныеXDTO.Вставить("ИнтернетЗаказ", ЗначениеЗаполнено(ДанныеИБ.RM_ВидИнтернетЗаказа));   
	ДанныеXDTO.Вставить("RM_ДатаРезерва", ЗначениеДопРеквизитаОбъекта(ДанныеИБ.Ссылка, "РезервДоВключительно", "Документ.ЗаказКлиента"));
	ДанныеXDTO.Вставить("НомерЗаявкиКС", ЗначениеДопСведенияОбъекта(ДанныеИБ.Ссылка, "НомерЗаявкиВКС"));
	//ДанныеXDTO.Вставить("ИдентификаторЗаказаКС", ЗначениеДопСведенияОбъекта(ДанныеИБ.Ссылка, "ИдентификаторЗаказаВКС"));
	
	
	
	ДанныеСтатуса = ДанныеСтатусаЗаказаКлиента(ДанныеИБ.Ссылка);
	Для каждого ЭлементДанных из ДанныеСтатуса Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.Значение) Тогда   
			ДанныеXDTO.Вставить(ЭлементДанных.Ключ, ЭлементДанных.Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.КонтактноеЛицо)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КонтактноеЛицо) Тогда
			ДанныеXDTO.Вставить("КонтактноеЛицоКонтрагента", ДанныеИБ.КонтактноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.RM_НастройкаОбменаДанными) Тогда
		ТипНастройки = ТипЗнч(ДанныеИБ.RM_НастройкаОбменаДанными);
		
		ИмяПКО = "";
		Если ТипНастройки = Тип("СправочникСсылка.RM_НастройкиОбменаСLamoda") Тогда
			ИмяПКО = "Справочник_RM_НастройкиОбменаСLamoda_Отправка";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПКО) Тогда
			ДанныеXDTO.Вставить("RM_НастройкаОбменаДанными", Новый Структура("Значение, ИмяПКО",
				ДанныеИБ.RM_НастройкаОбменаДанными,
				ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	// Табличные части
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(НоменклатураСправочник.ВариантОформленияПродажи, ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.ПустаяСсылка)) КАК ВариантОформленияПродажи,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСправочник.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСправочник.Наименование
		|					ИНАЧЕ ХарактеристикаСправочник.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСправочник.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСправочник.Наименование
		|		ИНАЧЕ НоменклатураСправочник.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	ЕСТЬNULL(НоменклатураСправочник.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И Товары.Ссылка.ВернутьМногооборотнуюТару
		|			ТОГДА ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	Товары.Содержание КАК Содержание,
		|	Товары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				ИЛИ ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Количество > 0
		|						ТОГДА ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ Товары.Цена
		|	КОНЕЦ КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА Товары.Количество > 0
		|			ТОГДА ВЫРАЗИТЬ(Товары.Сумма / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЦенаЗаУпаковку,
		|	Товары.НоменклатураПартнера КАК SKUКонтрагента,
		|	ВЫБОР
		|		КОГДА &ПоступлениеОднойДатой
		|			ТОГДА &ДатаПоступления
		|		ИНАЧЕ Товары.ДатаОтгрузки
		|	КОНЕЦ КАК ОжидаемаяДатаПоставки,
		|	Товары.Отменено КАК Отменено,
		|	Товары.ПричинаОтмены КАК ПричинаОтмены,
		|	ВЫБОР
		|		КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Зарезервировано,
		|	Товары.RM_ОтменаСогласованаСПокупателем КАК ОтменаСогласованаКлиентом,
		|	Товары.КодСтроки КАК КодСтроки,
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.RM_НомерОтправленияOZON КАК RM_НомерОтправленияOZON,
		|	Товары.RM_ИдентификаторТовараВСистемеOzon КАК RM_ИдентификаторТовараВСистемеOzon,
		|	Товары.RM_НаименованиеТовараOZON КАК RM_НаименованиеТовараOZON, 
		|	Товары.RM_ИдентификаторТовараСтрокой КАК RM_ИдентификаторТовараСтрокой,
		|	Товары.ВариантОбеспечения
		|ПОМЕСТИТЬ ЗаказанныеПозиции
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСправочник
		|		ПО Товары.Характеристика = ХарактеристикаСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.ТипЗапасов КАК ТипЗапасов,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.Зарезервировано КАК Зарезервировано,
		|	ТаблицаТовары.ОтменаСогласованаКлиентом КАК ОтменаСогласованаКлиентом,
		|	ТаблицаТовары.Отменено КАК Отменено,
		|	ТаблицаТовары.ПричинаОтмены КАК ПричинаОтмены,
		|	&ТекстЗапросаSKUКонтрагента,
		|	&ТекстЗапросаХарактеристика,
		|	&ТекстЗапросаУпаковка,
		|	&ТекстЗапросаОжидаемаяДатаПоставкиТовара,
		|	ТаблицаТовары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
		|	ТаблицаТовары.КодСтроки КАК КодСтроки,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,   
		|	ТаблицаТовары.RM_НомерОтправленияOZON КАК ДоставкаНомерОтправления,
		|	ТаблицаТовары.RM_НаименованиеТовараOZON КАК ДоставкаНаименованиеТовара,
		|	ТаблицаТовары.RM_ИдентификаторТовараВСистемеOzon КАК ДоставкаИдентификаторТовара,
		|	ТаблицаТовары.RM_ИдентификаторТовараСтрокой КАК ИдентификаторТовараСтрокой,
		|	ТаблицаТовары.ВариантОбеспечения
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
		|				ИЛИ ТаблицаУслуги.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)
		|			ТОГДА ТаблицаУслуги.Содержание
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаУслуги.ХарактеристикаНаименование = """"
		|					ТОГДА ТаблицаУслуги.НоменклатураНаименование
		|				ИНАЧЕ ТаблицаУслуги.НоменклатураНаименование + "" ("" + ТаблицаУслуги.ХарактеристикаНаименование + "")""
		|			КОНЕЦ
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
		|	ТаблицаУслуги.КодСтроки КАК КодСтроки,
		|	ТаблицаУслуги.КлючСвязи КАК КлючСвязи,
		|	ТаблицаУслуги.ВариантОбеспечения,
		|	&ТекстЗапросаОжидаемаяДатаПоставкиУслуги,
		|	&ТекстЗапросаУслугаКонтрагента
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ФормаОплаты,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа,
		|	ЗаказКлиентаЭтапыГрафикаОплаты.Сдвиг КАК КоличествоДнейОтсрочки
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
		|ГДЕ
		|	ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаказанныеПозиции.ОжидаемаяДатаПоставки) КАК ОжидаемаяДатаПоставки
		|ИЗ
		|	ЗаказанныеПозиции КАК ЗаказанныеПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказанныеПозиции.Номенклатура КАК Номенклатура,
		|	ЗаказанныеПозиции.Характеристика КАК Характеристика,
		|	ЗаказанныеПозиции.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказанныеПозиции КАК ЗаказанныеПозиции
		|		ПО (ЗаказанныеПозиции.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (ЗаказанныеПозиции.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (ЗаказанныеПозиции.Упаковка = ШтрихкодыНоменклатуры.Упаковка)
		|ГДЕ
		|	ЗаказанныеПозиции.Упаковка.Владелец <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказанныеПозиции.Номенклатура,
		|	ЗаказанныеПозиции.Характеристика,
		|	ЗаказанныеПозиции.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказанныеПозиции КАК ЗаказанныеПозиции
		|		ПО (ЗаказанныеПозиции.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (ЗаказанныеПозиции.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (ЗаказанныеПозиции.Упаковка.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаХарактеристика",
		ПолучитьТекстЗапросаХарактеристики(КомпонентыОбмена, "ТаблицаТовары"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУпаковка",
		ПолучитьТекстЗапросаУпаковки(КомпонентыОбмена, "ТаблицаТовары"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаSKUКонтрагента",
		ТекстЗапросаSKUКонтрагента(КомпонентыОбмена, "ТаблицаТовары",
		ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8")));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУслугаКонтрагента",
		ТекстЗапросаSKUКонтрагента(КомпонентыОбмена, "ТаблицаУслуги",
		ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8")));
	
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ТекстЗапросаОжидаемаяДатаПоставкиТовара = "ТаблицаТовары.ОжидаемаяДатаПоставки КАК ОжидаемаяДатаПоставки";
		ТекстЗапросаОжидаемаяДатаПоставкиУслуги = "ТаблицаУслуги.ОжидаемаяДатаПоставки КАК ОжидаемаяДатаПоставки";
	Иначе
		ТекстЗапросаОжидаемаяДатаПоставкиТовара = "Неопределено КАК ОжидаемаяДатаПоставки";
		ТекстЗапросаОжидаемаяДатаПоставкиУслуги = "Неопределено КАК ОжидаемаяДатаПоставки";
	КонецЕсли;
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОжидаемаяДатаПоставкиТовара",
		ТекстЗапросаОжидаемаяДатаПоставкиТовара);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОжидаемаяДатаПоставкиУслуги",
		ТекстЗапросаОжидаемаяДатаПоставкиУслуги);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПоступлениеОднойДатой", ДанныеИБ.НеОтгружатьЧастями);
	Запрос.УстановитьПараметр("ДатаПоступления", ДанныеИБ.ДатаОтгрузки);
	Запрос.УстановитьПараметр("ФормаОплаты", ?(ЗначениеЗаполнено(ДанныеИБ.ФормаОплаты),
		ДанныеИБ.ФормаОплаты, Перечисления.ФормыОплаты.Безналичная));
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатЗапроса[1].Выгрузить();
	ЗаполнитьХарактеристикуУпаковкуВТЧ(КомпонентыОбмена, Товары);
	ЗаполнитьНоменклатуруКонтрагентаВТЧ(КомпонентыОбмена, Товары, ДанныеИБ.Контрагент);
	ЗаполнитьШтрихкодыВТЧ(КомпонентыОбмена, Товары, РезультатЗапроса[5].Выгрузить());
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Услуги = РезультатЗапроса[2].Выгрузить();
	ЗаполнитьНоменклатуруКонтрагентаВТЧ(КомпонентыОбмена, Услуги, ДанныеИБ.Контрагент);
	ДанныеXDTO.Вставить("Услуги", Услуги);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.Вставить("Комментарий", ДанныеИБ.Комментарий);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ДанныеXDTO.Вставить("ЭтапыОплаты", РезультатЗапроса[3].Выгрузить());
		
		АгрегированныеДанные = РезультатЗапроса[4].Выгрузить();
		
		Если АгрегированныеДанные.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("ОжидаемаяДатаПоставки", АгрегированныеДанные[0].ОжидаемаяДатаПоставки);
		КонецЕсли;
		
	КонецЕсли;      
	
	
	// Выгрузка штрихкодов 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказыНаПеремещение
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.ДокументОснование = &ЗаказКлиента
	|	И ЗаказНаПеремещение.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.RM_ДокументОснования = &ЗаказКлиента
	|	И ЗаказНаПеремещение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РОнТRM_ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	ВТЗаказыНаПеремещение КАК ВТЗаказыНаПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РОнТТоварыПоРаспоряжениям
	|		ПО (РОнТТоварыПоРаспоряжениям.Распоряжение = ВТЗаказыНаПеремещение.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ПО (РОнТТоварыПоРаспоряжениям.Ссылка = РасходныйОрдерНаТовары.Ссылка)
	|			И (РасходныйОрдерНаТовары.Проведен)
	|			И (РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен))
	|			И (ВЫРАЗИТЬ(РасходныйОрдерНаТовары.Получатель КАК Справочник.Склады).ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.RM_ШтрихкодыУпаковок КАК РОнТRM_ШтрихкодыУпаковок
	|		ПО (РасходныйОрдерНаТовары.Ссылка = РОнТRM_ШтрихкодыУпаковок.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РОнТRM_ШтрихкодыУпаковок.ШтрихкодУпаковки";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДанныеИБ.Ссылка);
	
	ТаблицаШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("RM_ШтрихкодыУпаковок", ТаблицаШтрихкодыУпаковок); 
	 
	// Отправка статусов интернет заказов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	RM_ИсторияСтатусовИнтернетЗаказов.Период КАК Период,
	|	RM_ИсторияСтатусовИнтернетЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	|	RM_ИсторияСтатусовИнтернетЗаказов.Статус КАК Статус,
	|	RM_ИсторияСтатусовИнтернетЗаказов.Комментарий КАК Комментарий,
	|	RM_ИсторияСтатусовИнтернетЗаказов.Ответственный КАК Ответственный,
	|	RM_ИсторияСтатусовИнтернетЗаказов.ДокументРегистратор КАК ДокументРегистратор,
	|	RM_ИсторияСтатусовИнтернетЗаказов.ОтправленоВБУС КАК ОтправленоВБУС,
	|	RM_ИсторияСтатусовИнтернетЗаказов.МестноеВремя КАК МестноеВремя
	|ИЗ
	|	РегистрСведений.RM_ИсторияСтатусовИнтернетЗаказов КАК RM_ИсторияСтатусовИнтернетЗаказов
	|ГДЕ
	|	RM_ИсторияСтатусовИнтернетЗаказов.ЗаказКлиента = &ЗаказКлиента
	// ПустаяСсылка - Исключение передачи пустого статуса в случаях, когда добавили новый статус в конфигурацию-отправить и в УТ пришло пустое значение
	// ПереданНаКонтроль - выключен временно, т.к в рознице данный статус отсутствует
	|	И НЕ RM_ИсторияСтатусовИнтернетЗаказов.Статус В(ЗНАЧЕНИЕ(Перечисление.RM_СтатусыИнтернетЗаказов.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.RM_СтатусыИнтернетЗаказов.ПереданНаКонтроль))";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   
	
	ПравилоОбработкиСтатусы = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_RM_ИсторияСтатусовИнтернетЗаказов_Отправка", "Имя");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		НабЗап = РегистрыСведений.RM_ИсторияСтатусовИнтернетЗаказов.СоздатьНаборЗаписей();
		НабЗап.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НабЗап.Отбор.ЗаказКлиента.Установить(ВыборкаДетальныеЗаписи.ЗаказКлиента);   
		
		Запись = НабЗап.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		
		RM_ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НабЗап, ПравилоОбработкиСтатусы);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//ПриОтправкеДанных_ДобавитьОбщиеСведения(ДанныеXDTO);
КонецПроцедуры

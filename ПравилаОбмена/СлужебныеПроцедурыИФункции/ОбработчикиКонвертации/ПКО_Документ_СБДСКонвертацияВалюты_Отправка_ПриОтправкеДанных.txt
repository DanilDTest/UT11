Процедура ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7")
		И ЗначениеЗаполнено(ДанныеИБ.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ДанныеXDTO.Вставить("ЗаявкаНаРасходДенежныхСредств", ДанныеИБ.ЗаявкаНаРасходованиеДенежныхСредств);
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.Валюта = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.Валюта <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	СтрокаРП.ВалютаКонвертации = ДанныеИБ.ВалютаКонвертации;
	СтрокаРП.КурсКонвертации = ДанныеИБ.КурсКонвертации;
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаКонвертации, ДанныеИБ.Дата);
	Если ДанныеИБ.КратностьКурсаКонвертации <> 0 Тогда
		СтрокаРП.КратностьКонвертации = ДанныеИБ.КратностьКурсаКонвертации;
	Иначе 
		СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	КонецЕсли;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		ДанныеИБ.КурсКонвертации, ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность, ДанныеИБ.ВалютаКонвертации);
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	Иначе
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	КонецЕсли;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаКонвертации;
	Иначе 
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	КонецЕсли;
	ПараметрыПоУмолчанию.ВидДоговора = "Прочее";
	ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
	ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = Ложь;
	
	СтрокаРП.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры

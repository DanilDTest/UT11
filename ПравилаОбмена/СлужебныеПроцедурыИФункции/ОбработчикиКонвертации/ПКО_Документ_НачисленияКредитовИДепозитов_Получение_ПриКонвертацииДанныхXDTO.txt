Процедура ПКО_Документ_НачисленияКредитовИДепозитов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен    = Истина;
	
	ХарактерДоговора = Неопределено;
	Если ДанныеXDTO.Свойство("ВидОперации") И ЗначениеЗаполнено(ДанныеXDTO.ВидОперации) Тогда
		ВидОперации = ДанныеXDTO.ВидОперации.Значение;
		Если ВидОперации = "КредитыПолученные" Тогда
			ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм;
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам;
		ИначеЕсли ВидОперации = "Депозиты" Тогда
			ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит;
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоДепозитам;
		ИначеЕсли ВидОперации = "ЗаймыПолученные" Тогда
			ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный;
			ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеХарактераТипаДоговора = Новый Соответствие;
	СоответствиеХарактераТипаДоговора.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм,
		Перечисления.ТипыДоговораКредитовИДепозитов.КредитВБанке);
	СоответствиеХарактераТипаДоговора.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит,
		Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанке);
	СоответствиеХарактераТипаДоговора.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный,
		Перечисления.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм);
	
	Если ДанныеXDTO.Свойство("Начисления") И ЗначениеЗаполнено(ДанныеXDTO.Начисления) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Дата", "Дата");
		ПравилаЗаполнения.Вставить("Контрагент",           "Контрагент");
		ПравилаЗаполнения.Вставить("Договор",              "Договор");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",  "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
		
		МассивСтрокНачисления = Новый Массив;
		Для Каждого Строка Из ДанныеXDTO.Начисления Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ТипСуммыГрафика = Строка.ТипСуммыГрафика.Значение;
			Если ТипСуммыГрафика = "Проценты" Тогда
				СтруктураДанныхСтроки.Вставить("ТипСуммыГрафика", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты);
			ИначеЕсли ТипСуммыГрафика = "Комиссия" Тогда
				СтруктураДанныхСтроки.Вставить("ТипСуммыГрафика", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия);
			Иначе
				СтруктураДанныхСтроки.Вставить("ТипСуммыГрафика", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг);
			КонецЕсли;
			
			Если СтруктураДанныхСтроки.Свойство("Договор") Тогда
				Если ЗначениеЗаполнено(Строка.СрочностьКредитаЗайма) Тогда
					Если Строка.СрочностьКредитаЗайма.Значение = "Краткосрочный" Тогда
						ТипСрочности = Перечисления.ТипыСрочностиКредитовИДепозитов.Краткосрочный;
					Иначе
						ТипСрочности = Перечисления.ТипыСрочностиКредитовИДепозитов.Долгосрочный;
					КонецЕсли;
					СтруктураДанныхСтроки.Договор.Вставить("ТипСрочности", ТипСрочности);
				КонецЕсли;
				Если ЗначениеЗаполнено(ХарактерДоговора) Тогда
					СтруктураДанныхСтроки.Договор.Вставить("ХарактерДоговора", ХарактерДоговора);
					ТипДоговора = СоответствиеХарактераТипаДоговора.Получить(ХарактерДоговора);
					СтруктураДанныхСтроки.Договор.Вставить("ТипДоговора", ТипДоговора);
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьВалютуВРасшифровкуПлатежа(СтруктураДанныхСтроки, Строка);	
			
			МассивСтрокНачисления.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Начисления", МассивСтрокНачисления);
	КонецЕсли;
КонецПроцедуры

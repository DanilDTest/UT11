Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искусственно, если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	// Контрагент и банковский счет
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		ИЛИ  ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		ДанныеКонтрагента = ПолучитьДанныеКонтрагентаПоБанкСчетуОрганизации(ДанныеИБ.БанковскийСчетОтправитель, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Контрагент", ДанныеКонтрагента.Контрагент);
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеКонтрагента.БанковскийСчетКонтрагента);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.БанковскийСчетКонтрагента);
	КонецЕсли;
		
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "БанковскийСчет");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	РасшифровкаПлатежаРасширенная = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации, КомпонентыОбмена);
КонецПроцедуры

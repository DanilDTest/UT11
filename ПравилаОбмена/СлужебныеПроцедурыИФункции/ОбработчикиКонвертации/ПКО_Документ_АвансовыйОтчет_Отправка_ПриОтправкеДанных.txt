Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	
	// Данные шапки документа необходимы для вычисления курса и кратности.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Валюта КАК Валюта) КАК ВалютаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	|		ПО (КурсыВалютСрезПоследних.Валюта = ВалютаДокумента.Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Сумма,
	|	ПрочиеРасходы.СтавкаНДС,
	|	ПрочиеРасходы.СуммаНДС,
	|	ПрочиеРасходы.СтатьяДвиженияДенежныхСредств,
	|	ПрочиеРасходы.Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов,
	|	ПрочиеРасходы.СчетУчета,
	|	ПрочиеРасходы.ИдентификаторСтроки,
	|	ПрочиеРасходы.НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента,
	|	ПрочиеРасходы.Комментарий,
	|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов1
	|ПОМЕСТИТЬ ВТПрочиеРасходы
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Контрагент,
	|	ОплатаПоставщикам.Сумма,
	|	ОплатаПоставщикам.СуммаВзаиморасчетов,
	|	ОплатаПоставщикам.Комментарий,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	ОплатаПоставщикам.Заказ,
	|	ОплатаПоставщикам.ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВТОплатаПоставщикам
	|ИЗ
	|	&ОплатаПоставщикам КАК ОплатаПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК Номенклатура,
	|	АвансовыйОтчетПрочиеРасходы.Контрагент КАК Поставщик,
	|	АвансовыйОтчетПрочиеРасходы.Сумма КАК Сумма,
	|	АвансовыйОтчетПрочиеРасходы.СтавкаНДС КАК СтавкаНДС,
	|	АвансовыйОтчетПрочиеРасходы.СуммаНДС КАК СуммаНДС,
	|	АвансовыйОтчетПрочиеРасходы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	АвансовыйОтчетПрочиеРасходы.Подразделение КАК Подразделение,
	|	АвансовыйОтчетПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	АвансовыйОтчетПрочиеРасходы.СчетУчета КАК СчетУчета,
	|	АвансовыйОтчетПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК ПредъявленСФ,
	|	АвансовыйОтчетПрочиеРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	АвансовыйОтчетПрочиеРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	АвансовыйОтчетПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента,
	|	NULL КАК ДатаСФ,
	|	NULL КАК НомерСФ,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(АвансовыйОтчетПрочиеРасходы.Комментарий, 0, 1) = """"
	|			ТОГДА ЕСТЬNULL(СтатьиРасходов.Наименование, ЕСТЬNULL(СтатьиАктивовПассивов.Наименование, """"))
	|		ИНАЧЕ АвансовыйОтчетПрочиеРасходы.Комментарий
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ВТПрочиеРасходы КАК АвансовыйОтчетПрочиеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (СтатьиРасходов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|		ПО (СтатьиАктивовПассивов.Ссылка = АвансовыйОтчетПрочиеРасходы.СтатьяРасходов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетОплатаПоставщикам.Контрагент,
	|	АвансовыйОтчетОплатаПоставщикам.Сумма,
	|	АвансовыйОтчетОплатаПоставщикам.СуммаВзаиморасчетов,
	|	АвансовыйОтчетОплатаПоставщикам.Комментарий КАК Содержание,
	|	АвансовыйОтчетОплатаПоставщикам.НомерВходящегоДокумента,
	|	АвансовыйОтчетОплатаПоставщикам.ДатаВходящегоДокумента,
	|	АвансовыйОтчетОплатаПоставщикам.Заказ КАК Заказ,
	|	АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсВалюты.Курс, 1) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсВалюты.Кратность, 1) КАК КратностьВзаиморасчетов
	|ИЗ
	|	ВТОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсВалюты
	|		ПО АвансовыйОтчетОплатаПоставщикам.ВалютаВзаиморасчетов = КурсВалюты.Валюта";
	
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("Валюта", ДанныеИБ.Валюта);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы);
		Запрос.УстановитьПараметр("ОплатаПоставщикам", ДанныеИБ.ОплатаПоставщикам);
	Иначе
		Запрос.УстановитьПараметр("ПрочиеРасходы", ДанныеИБ.ПрочиеРасходы.Выгрузить());
		Запрос.УстановитьПараметр("ОплатаПоставщикам", ДанныеИБ.ОплатаПоставщикам.Выгрузить());
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОперации = РезультатыЗапроса[0].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсДокумента", ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьДокумента", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	
	ТабПрочее = РезультатыЗапроса[3].Выгрузить(); 
	ТабПрочее.Колонки.Добавить("ПодразделениеЗатрат");
	ТабПрочее.Колонки.Добавить("СчетЗатрат");
	ТабПрочее.Колонки.Добавить("СтатьяЗатрат");
	Для Каждого СтрокаПрочее Из ТабПрочее Цикл
		Если ЗначениеЗаполнено(СтрокаПрочее.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаПрочее.Подразделение);
			СтрокаПрочее.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
	
		СчетЗатрат = СчетУчетаПоСтатье(СтрокаПрочее.СтатьяРасходов, ДанныеИБ.Организация, СтрокаПрочее.Подразделение, СтрокаПрочее.СчетУчета);
	
		Если ТипЗнч(СтрокаПрочее.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаПрочее.СтатьяЗатрат = СтрокаПрочее.СтатьяРасходов;
			Если ЭтоУТ() 
				И ЗначениеЗаполнено(СтрокаПрочее.СтатьяДвиженияДенежныхСредств) Тогда
				СчетЗатратДДС = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПрочее.СтатьяДвиженияДенежныхСредств, 
											"КорреспондирующийСчет"));
				Если ЗначениеЗаполнено(СчетЗатратДДС) Тогда
					СчетЗатрат = СчетЗатратДДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаПрочее.СчетЗатрат = СчетЗатрат;
	КонецЦикла;
	ДанныеXDTO.Вставить("ПрочиеРасходы", ТабПрочее);
	
	ТабОплатаПоставщикам = РезультатыЗапроса[4].Выгрузить(); 
	// Заполнение договора
	ТабОплатаПоставщикам.Колонки.Добавить("Договор");
	Для Каждого СтрокаТаблицы Из ТабОплатаПоставщикам Цикл
		ТекДоговор = Неопределено;
		РасчетыВУсловныхЕдиницах = Ложь;
		Соглашение = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТекДоговор = СтрокаТаблицы.Заказ;
			КонецЕсли;
				
			Если ТекДоговор = Неопределено Тогда
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					ТекДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Договор");
				Иначе
					// Не удалось определить договор из заказа. Договор будет вычислен позже.
					ТекДоговор = Неопределено;
				КонецЕсли;
				Если СтрокаТаблицы.Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
					Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Заказ, "Соглашение");
				Иначе
					// Не удалось определить соглашение из заказа. Соглашение будет вычислено позже.
					Соглашение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТекДоговор <> Неопределено И ЗначениеЗаполнено(ТекДоговор) Тогда
			СтрокаТаблицы.Договор = ТекДоговор;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.Контрагент = СтрокаТаблицы.Контрагент;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		СтрокаТаблицы.Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, СтрокаТаблицы.Заказ, ДанныеИБ);
	КонецЦикла;
	ДанныеXDTO.Вставить("ОплатаПоставщикам", ТабОплатаПоставщикам);
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	ДанныеXDTO.Вставить("Сумма", ТабПрочее.Итог("Сумма") + ТабОплатаПоставщикам.Итог("Сумма"));
КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ДанныеXDTO.Вставить("ДатаВходящегоДокумента", ДанныеИБ.ДатаПоДаннымПоставщика);
			ДанныеXDTO.Вставить("НомерВходящегоДокумента", ДанныеИБ.НомерПоДаннымПоставщика);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.ДатаПоДаннымПоставщика);
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", ДанныеИБ.НомерПоДаннымПоставщика);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ВыгрузитьНалогообложениеНДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина, Ложь, "НалогообложениеНДСПродавца");
		
		ДанныеXDTO.Вставить("ОтгружатьЗаказЦеликом", ДанныеИБ.ПоступлениеОднойДатой);
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Если Не ДоставкаТоваровКлиентСервер.ДоставкаИспользуется(ДанныеИБ.СпособДоставки) Тогда
		// Доставка силами поставщика
		ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставкиДляПоставщика);
	Иначе
		// Самовывоз
		ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки);
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Договор, "ПорядокОплаты, ВалютаВзаиморасчетов");
		
		ДанныеXDTO.Вставить("Договор",                  ДанныеИБ.Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", (СвойстваДоговора.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях));
		
		ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.ХозяйственнаяОперация);
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		
		Если ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером" Тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		Иначе
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ВыгрузитьКурсИКратностьВзаиморасчетов(ДанныеXDTO, ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.КонтактноеЛицо)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КонтактноеЛицо) Тогда
			ДанныеXDTO.Вставить("КонтактноеЛицоКонтрагента", ДанныеИБ.КонтактноеЛицо);
		КонецЕсли;
		ДанныеXDTO.Вставить("ОжидаемаяДатаПоступления", ДанныеИБ.ЖелаемаяДатаПоступления);
		ДанныеXDTO.Вставить("СпособДоставки", ДанныеИБ.СпособДоставки);
	КонецЕсли;
	
	// Табличные части
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(НоменклатураСправочник.ВариантОформленияПродажи, ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.ПустаяСсылка)) КАК ВариантОформленияПродажи,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСправочник.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСправочник.Наименование
		|					ИНАЧЕ ХарактеристикаСправочник.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСправочник.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСправочник.Наименование
		|		ИНАЧЕ НоменклатураСправочник.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	ЕСТЬNULL(НоменклатураСправочник.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И Товары.Ссылка.ВернутьМногооборотнуюТару
		|			ТОГДА ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	Товары.НоменклатураПартнера КАК SKUКонтрагента,
		|	Товары.Количество КАК Количество,
		|	ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2)) КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.Цена КАК ЦенаЗаУпаковку,
		|	ВЫБОР
		|		КОГДА &ПоступлениеОднойДатой
		|			ТОГДА &ДатаПоступления
		|		ИНАЧЕ Товары.ДатаПоступления
		|	КОНЕЦ КАК ОжидаемаяДатаПоставки
		|ПОМЕСТИТЬ ЗаказанныеПозиции
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСправочник
		|		ПО Товары.Характеристика = ХарактеристикаСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Отменено = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.ТипЗапасов КАК ТипЗапасов,
		|	&ТекстЗапросаSKUКонтрагента,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.Цена КАК Цена,
		|	&ТекстЗапросаХарактеристика,
		|	&ТекстЗапросаУпаковка,
		|	&ТекстЗапросаОжидаемаяДатаПоставкиТовара,
		|	ТаблицаТовары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ТекстЗапросаУслугаКонтрагента,
		|	&ТекстЗапросаОжидаемаяДатаПоставкиУслуги,
		|	ТаблицаУслуги.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.Сумма КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И НЕ(ТаблицаУслуги.Сумма = 0
		|				И &ОграничениеНулевойСуммыУслуг)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ФормаОплаты КАК ФормаОплаты,
		|	ЗаказПоставщикуЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
		|	ЗаказПоставщикуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		|	ЗаказПоставщикуЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ЗаказПоставщикуЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа,
		|	ЗаказПоставщикуЭтапыГрафикаОплаты.Сдвиг КАК КоличествоДнейОтсрочки
		|ИЗ
		|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЗаказПоставщикуЭтапыГрафикаОплаты
		|ГДЕ
		|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаказанныеПозиции.ОжидаемаяДатаПоставки) КАК ОжидаемаяДатаПоставки
		|ИЗ
		|	ЗаказанныеПозиции КАК ЗаказанныеПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказанныеПозиции.Номенклатура КАК Номенклатура,
		|	ЗаказанныеПозиции.Характеристика КАК Характеристика,
		|	ЗаказанныеПозиции.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказанныеПозиции КАК ЗаказанныеПозиции
		|		ПО (ЗаказанныеПозиции.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (ЗаказанныеПозиции.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (ЗаказанныеПозиции.Упаковка = ШтрихкодыНоменклатуры.Упаковка)
		|ГДЕ
		|	ЗаказанныеПозиции.Упаковка.Владелец <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказанныеПозиции.Номенклатура,
		|	ЗаказанныеПозиции.Характеристика,
		|	ЗаказанныеПозиции.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказанныеПозиции КАК ЗаказанныеПозиции
		|		ПО (ЗаказанныеПозиции.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (ЗаказанныеПозиции.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (ЗаказанныеПозиции.Упаковка.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаХарактеристика",
		ПолучитьТекстЗапросаХарактеристики(КомпонентыОбмена, "ТаблицаТовары"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУпаковка",
		ПолучитьТекстЗапросаУпаковки(КомпонентыОбмена, "ТаблицаТовары"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаSKUКонтрагента",
		ТекстЗапросаSKUКонтрагента(КомпонентыОбмена, "ТаблицаТовары",
		ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7")));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУслугаКонтрагента",
		ТекстЗапросаSKUКонтрагента(КомпонентыОбмена, "ТаблицаУслуги",
		ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8")));
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ТекстЗапросаОжидаемаяДатаПоставкиТовара = "ТаблицаТовары.ОжидаемаяДатаПоставки КАК ОжидаемаяДатаПоставки";
		ТекстЗапросаОжидаемаяДатаПоставкиУслуги = "ТаблицаУслуги.ОжидаемаяДатаПоставки КАК ОжидаемаяДатаПоставки";
	Иначе
		ТекстЗапросаОжидаемаяДатаПоставкиТовара = "Неопределено КАК ОжидаемаяДатаПоставки";
		ТекстЗапросаОжидаемаяДатаПоставкиУслуги = "Неопределено КАК ОжидаемаяДатаПоставки";
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОжидаемаяДатаПоставкиТовара",
		ТекстЗапросаОжидаемаяДатаПоставкиТовара);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОжидаемаяДатаПоставкиУслуги",
		ТекстЗапросаОжидаемаяДатаПоставкиУслуги);
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ФормаОплаты", ?(ЗначениеЗаполнено(ДанныеИБ.ФормаОплаты),
		ДанныеИБ.ФормаОплаты, Перечисления.ФормыОплаты.Безналичная));
	Запрос.УстановитьПараметр("ПоступлениеОднойДатой", ДанныеИБ.ПоступлениеОднойДатой);
	Запрос.УстановитьПараметр("ДатаПоступления", ДанныеИБ.ДатаПоступления);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ОграничениеНулевойСуммыУслуг",
		ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6"));
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатЗапроса[1].Выгрузить();
	ЗаполнитьХарактеристикуУпаковкуВТЧ(КомпонентыОбмена, Товары);
	ЗаполнитьНоменклатуруКонтрагентаВТЧ(КомпонентыОбмена, Товары, ДанныеИБ.Контрагент);
	ЗаполнитьШтрихкодыВТЧ(КомпонентыОбмена, Товары, РезультатЗапроса[5].Выгрузить());
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Услуги = РезультатЗапроса[2].Выгрузить();
	ЗаполнитьНоменклатуруКонтрагентаВТЧ(КомпонентыОбмена, Услуги, ДанныеИБ.Контрагент);
	ДанныеXDTO.Вставить("Услуги", Услуги);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		АгрегированныеДанные = РезультатЗапроса[4].Выгрузить();
		
		Если АгрегированныеДанные.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("ОжидаемаяДатаПоставки", АгрегированныеДанные[0].ОжидаемаяДатаПоставки);
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ЭтапыОплаты", РезультатЗапроса[3].Выгрузить());
	КонецЕсли;        
	
	СтруктураДополнительныхРеквизитов = Новый Структура;
	СтруктураДополнительныхРеквизитов.Вставить("Комментарий", ДанныеИБ.Комментарий);
	СтруктураДополнительныхРеквизитов.Вставить("СуммаДокумента", ДанныеИБ.СуммаДокумента);
	СтруктураДополнительныхРеквизитов.Вставить("ДатаПоступления", ДанныеИБ.ДатаПоступления);
	СтруктураДополнительныхРеквизитов.Вставить("ДатаПервогоПоступления", ДанныеИБ.ДатаПервогоПоступления);
	СтруктураДополнительныхРеквизитов.Вставить("СуммаПредоплатыДоПоступления", ДанныеИБ.СуммаПредоплатыДоПоступления);
	СтруктураДополнительныхРеквизитов.Вставить("ЖелаемаяДатаПоступления", ДанныеИБ.ЖелаемаяДатаПоступления);
	СтруктураДополнительныхРеквизитов.Вставить("ДатаСогласования", ДанныеИБ.ДатаСогласования);
	СтруктураДополнительныхРеквизитов.Вставить("МаксимальныйКодСтроки", ДанныеИБ.МаксимальныйКодСтроки);
	СтруктураДополнительныхРеквизитов.Вставить("АдресДоставкиЗначенияПолей", ДанныеИБ.АдресДоставкиЗначенияПолей);
	СтруктураДополнительныхРеквизитов.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки);
	СтруктураДополнительныхРеквизитов.Вставить("СуммаАвансаДоПодтверждения", ДанныеИБ.СуммаАвансаДоПодтверждения);
	СтруктураДополнительныхРеквизитов.Вставить("АдресДоставкиДляПоставщика", ДанныеИБ.АдресДоставкиДляПоставщика);
	СтруктураДополнительныхРеквизитов.Вставить("ЦенаВключаетНДС", ДанныеИБ.ЦенаВключаетНДС);
	СтруктураДополнительныхРеквизитов.Вставить("RM_КомментарийОперационистаПоЗаказу", ДанныеИБ.RM_КомментарийОперационистаПоЗаказу);
	СтруктураДополнительныхРеквизитов.Вставить("Согласован", ДанныеИБ.Согласован);
	СтруктураДополнительныхРеквизитов.Вставить("RM_РаботаПоЗаказуПоставщикаЗавершена", ДанныеИБ.RM_РаботаПоЗаказуПоставщикаЗавершена);
	СтруктураДополнительныхРеквизитов.Вставить("RM_МаркировкаЗаказаВыполнена", ДанныеИБ.RM_МаркировкаЗаказаВыполнена);
	СтруктураДополнительныхРеквизитов.Вставить("ПоступлениеОднойДатой", ДанныеИБ.ПоступлениеОднойДатой);
	СтруктураДополнительныхРеквизитов.Вставить("ТребуетсяЗалогЗаТару", ДанныеИБ.ТребуетсяЗалогЗаТару);
	СтруктураДополнительныхРеквизитов.Вставить("РегистрироватьЦеныПоставщика", ДанныеИБ.РегистрироватьЦеныПоставщика);
	СтруктураДополнительныхРеквизитов.Вставить("ВернутьМногооборотнуюТару", ДанныеИБ.ВернутьМногооборотнуюТару);
	СтруктураДополнительныхРеквизитов.Вставить("ЕстьКиЗГИСМ", ДанныеИБ.ЕстьКиЗГИСМ);
	СтруктураДополнительныхРеквизитов.Вставить("ОсобыеУсловияПеревозки", ДанныеИБ.ОсобыеУсловияПеревозки); 
	СтруктураДополнительныхРеквизитов.Вставить("ДополнительнаяИнформация", ДанныеИБ.ДополнительнаяИнформация);
	СтруктураДополнительныхРеквизитов.Вставить("RM_НомерСопроводительногоДокумента", ДанныеИБ.RM_НомерСопроводительногоДокумента);
	
	
	
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныхРеквизитов, ДанныеИБ);  
	ВыгрузитьДополнительныеРеквизитыСвойствоСтрокой(СтруктураДополнительныхРеквизитов, ДанныеXDTO);
КонецПроцедуры

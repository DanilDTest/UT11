Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Адрес = Неопределено;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеИБ.Ссылка,
			Справочники.ВидыКонтактнойИнформации.АдресСклада,,Ложь);
			
		Адрес = ?(Адрес.Количество() > 0, Адрес[0], Неопределено);
			
		ДанныеXDTO.КлючевыеСвойства.Вставить("СкладГруппа", ДанныеИБ.Родитель);
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8")
			И Адрес <> Неопределено И Не ПустаяСтрока(Адрес.Значение) Тогда
			
			КодАдресаФИАС = АдресныйКлассификатор.КодыАдреса(Адрес.Значение).Идентификатор;
			Если ЗначениеЗаполнено(КодАдресаФИАС) Тогда
				ДанныеXDTO.КлючевыеСвойства.Вставить("КодАдресаФИАС", XMLСтрока(КодАдресаФИАС));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7") Тогда
		ДанныеXDTO.Вставить("Группа", ДанныеИБ.Родитель);
	КонецЕсли;
		
	//Подразделение
	//Если ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
	//	СтруктураДанныеПодразделения = Новый Структура("Наименование, РегистрацияПодразделенияВНалоговомОргане", 
	//								ДанныеИБ.Подразделение.Наименование, ,Неопределено);
	//	ДанныеXDTO.Вставить("Подразделение", Новый Структура("Значение, ИмяПКО", СтруктураДанныеПодразделения, "Справочник_Подразделения_ИзСтруктуры"));
	//Иначе
	//	ДанныеXDTO.Вставить("Подразделение", Неопределено);	
	//КонецЕсли;
		
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		Если Адрес <> Неопределено И ЗначениеЗаполнено(Адрес.Представление) Тогда
			ДанныеXDTO.Вставить("АдресСтрокой", Адрес.Представление);
		КонецЕсли;
	
		ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	
	НастройкиАссортимента = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийНастройкиАссортимента(ДанныеИБ.Ссылка);   
	Если ЗначениеЗаполнено(НастройкиАссортимента.ФорматМагазина) Тогда
		КонтролироватьАссортимент = НастройкиАссортимента.КонтролироватьАссортимент;
	Иначе
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	ДанныеXDTO.Вставить("КонтролироватьАссортимент", КонтролироватьАссортимент);	
	ДанныеXDTO.Вставить("ЭтоГруппа", Ложь);          
	                                          
	Если ЗначениеЗаполнено(ДанныеИБ.RM_ФорматМагазина) Тогда  
		ДанныеXDTO.Вставить("ФорматМагазина", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.RM_ФорматМагазина, "Наименование"));   
	КонецЕсли;	                                        
	
	ВыгрузитьПереводыРеквизитов(ДанныеИБ.Ссылка, ДанныеXDTO);     
	                                          
	
	СтруктураДополнительныхРеквизитов = Новый Структура;
	СтруктураДополнительныхРеквизитов.Вставить("ДатаНачалаОрдернойСхемыПриПоступлении", ДанныеИБ.ДатаНачалаОрдернойСхемыПриПоступлении);
	СтруктураДополнительныхРеквизитов.Вставить("ДатаНачалаОрдернойСхемыПриОтгрузке", ДанныеИБ.ДатаНачалаОрдернойСхемыПриОтгрузке);
	СтруктураДополнительныхРеквизитов.Вставить("RM_МаксимальныйЛимитКоробовВПоставке", ДанныеИБ.RM_МаксимальныйЛимитКоробовВПоставке);
	СтруктураДополнительныхРеквизитов.Вставить("RM_РабочийЛимитКоробовВПоставке", ДанныеИБ.RM_РабочийЛимитКоробовВПоставке);
	СтруктураДополнительныхРеквизитов.Вставить("ДатаНачалаИспользованияСкладскихПомещений", ДанныеИБ.ДатаНачалаИспользованияСкладскихПомещений);
	СтруктураДополнительныхРеквизитов.Вставить("ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач", ДанныеИБ.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач);
	СтруктураДополнительныхРеквизитов.Вставить("RM_Расположение", ДанныеИБ.RM_Расположение);
	СтруктураДополнительныхРеквизитов.Вставить("RM_Приоритет", ДанныеИБ.RM_Приоритет);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьСкладскиеПомещения", ДанныеИБ.ИспользоватьСкладскиеПомещения);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ЗавершитьОбходСкладовОтгрузки", ДанныеИБ.RM_ЗавершитьОбходСкладовОтгрузки);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ОтгрузкаУпаковками", ДанныеИБ.RM_ОтгрузкаУпаковками);
	СтруктураДополнительныхРеквизитов.Вставить("RM_РасширитьМатрицуСкладаМатрицамиПодчиненныхСкладов", ДанныеИБ.RM_РасширитьМатрицуСкладаМатрицамиПодчиненныхСкладов);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ВиртуальноеПеремещение", ДанныеИБ.RM_ВиртуальноеПеремещение);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ЯвляетсяИнтернетМагазином", ДанныеИБ.RM_ЯвляетсяИнтернетМагазином);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ОбрабатыватьДТУЦНАвтоматически", ДанныеИБ.RM_ОбрабатыватьДТУЦНАвтоматически);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ЯвляетсяВнешнимСкладом", ДанныеИБ.RM_ЯвляетсяВнешнимСкладом);
	СтруктураДополнительныхРеквизитов.Вставить("RM_СоздаватьЦепочкуНаКоррекцииАвтоматически", ДанныеИБ.RM_СоздаватьЦепочкуНаКоррекцииАвтоматически);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ЯвляетсяЦентральнымСкладом", ДанныеИБ.RM_ЯвляетсяЦентральнымСкладом);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ЦентральныйCкладОРТ", ДанныеИБ.RM_ЦентральныйCкладОРТ);
	СтруктураДополнительныхРеквизитов.Вставить("RM_УчитыватьПриРасчетеСебестоимости", ДанныеИБ.RM_УчитыватьПриРасчетеСебестоимости);
	СтруктураДополнительныхРеквизитов.Вставить("RM_СуммироватьПотребностиПодчиненныхСкладов", ДанныеИБ.RM_СуммироватьПотребностиПодчиненныхСкладов);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ВыгрузкаДляМВидео", ДанныеИБ.RM_ВыгрузкаДляМВидео);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьСтатусыРасходныхОрдеров", ДанныеИБ.ИспользоватьСтатусыРасходныхОрдеров);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьСтатусыПриходныхОрдеров", ДанныеИБ.ИспользоватьСтатусыПриходныхОрдеров);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьСтатусыПересчетовТоваров", ДанныеИБ.ИспользоватьСтатусыПересчетовТоваров);
	СтруктураДополнительныхРеквизитов.Вставить("КонтролироватьОперативныеОстатки", ДанныеИБ.КонтролироватьОперативныеОстатки);
	СтруктураДополнительныхРеквизитов.Вставить("RM_РазрешенаОтгрузкаУпаковкамиМаркированногоТовара", ДанныеИБ.RM_РазрешенаОтгрузкаУпаковкамиМаркированногоТовара);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьАдресноеХранение", ДанныеИБ.ИспользоватьАдресноеХранение);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ВыгружатьОстаткиДляСайта", ДанныеИБ.RM_ВыгружатьОстаткиДляСайта);
	СтруктураДополнительныхРеквизитов.Вставить("КонтролироватьОбеспечение", ДанныеИБ.КонтролироватьОбеспечение);
	СтруктураДополнительныхРеквизитов.Вставить("RM_СтатусДляОтчета", ДанныеИБ.RM_СтатусДляОтчета);
	СтруктураДополнительныхРеквизитов.Вставить("RM_АгентскийИмпорт", ДанныеИБ.RM_АгентскийИмпорт);
	СтруктураДополнительныхРеквизитов.Вставить("RM_АвтоматическоеСозданиеДокументов", ДанныеИБ.RM_АвтоматическоеСозданиеДокументов);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ZAROP", ДанныеИБ.RM_ZAROP);
	СтруктураДополнительныхРеквизитов.Вставить("RM_Импорт", ДанныеИБ.RM_Импорт);
	СтруктураДополнительныхРеквизитов.Вставить("RM_НеНазначатьЗонуОтгрузки", ДанныеИБ.RM_НеНазначатьЗонуОтгрузки);
	СтруктураДополнительныхРеквизитов.Вставить("УчитыватьСебестоимостьПоСериям", ДанныеИБ.УчитыватьСебестоимостьПоСериям);
	СтруктураДополнительныхРеквизитов.Вставить("ОтветственноеХранениеДоВостребования", ДанныеИБ.ОтветственноеХранениеДоВостребования);
	СтруктураДополнительныхРеквизитов.Вставить("ЦеховаяКладовая", ДанныеИБ.ЦеховаяКладовая);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ИндексДляОтчета", ДанныеИБ.RM_ИндексДляОтчета);
	СтруктураДополнительныхРеквизитов.Вставить("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку", ДанныеИБ.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ТехническийСклад", ДанныеИБ.RM_ТехническийСклад);
	СтруктураДополнительныхРеквизитов.Вставить("СкладОтветственногоХранения", ДанныеИБ.СкладОтветственногоХранения);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ЛогистическоеПлечо", ДанныеИБ.RM_ЛогистическоеПлечо);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ПорогДляОтгрузки", ДанныеИБ.RM_ПорогДляОтгрузки);
	СтруктураДополнительныхРеквизитов.Вставить("RM_РаботаетВУТ10", ДанныеИБ.RM_РаботаетВУТ10);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ПеремещенияЗапрещены", ДанныеИБ.RM_ПеремещенияЗапрещены);
	СтруктураДополнительныхРеквизитов.Вставить("RM_ПроцентЗаполнения", ДанныеИБ.RM_ПроцентЗаполнения);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьАдресноеХранениеСправочно", ДанныеИБ.ИспользоватьАдресноеХранениеСправочно);
	СтруктураДополнительныхРеквизитов.Вставить("RM_Глобус", ДанныеИБ.RM_Глобус);
	СтруктураДополнительныхРеквизитов.Вставить("ИспользоватьСерииНоменклатуры", ДанныеИБ.ИспользоватьСерииНоменклатуры);
	СтруктураДополнительныхРеквизитов.Вставить("RM_АвтоматическоеУправлениеАссортиментнойМатрицейСклада", ДанныеИБ.RM_АвтоматическоеУправлениеАссортиментнойМатрицейСклада);    
	СтруктураДополнительныхРеквизитов.Вставить("RM_УПДДляПроездаЕС", ДанныеИБ.RM_УПДДляПроездаЕС);
	
	                                   
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныхРеквизитов, ДанныеИБ);  
	
	
	                                   
	ВыгрузитьДополнительныеРеквизитыСвойствоСтрокой(СтруктураДополнительныхРеквизитов, ДанныеXDTO);
КонецПроцедуры
